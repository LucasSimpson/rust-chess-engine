<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="3681"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.0000%" y="693" width="0.0543%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.0543%" y="693" width="0.0272%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3043%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="0.0543%" y="677" width="0.0272%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3043%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.0815%" y="693" width="0.0272%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3315%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="0.0815%" y="677" width="0.0272%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3315%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0815%" y="661" width="0.0272%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3315%" y="671.50"></text></g><g><title>chess::v2::Manager::work::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0815%" y="645" width="0.0272%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.3315%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="0.0815%" y="629" width="0.0272%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.3315%" y="639.50"></text></g><g><title>chess::v2::Manager::work::_{{closure}}::_{{closure}} (1 samples, 0.03%)</title><rect x="0.0815%" y="613" width="0.0272%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.3315%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.71%)</title><rect x="0.1087%" y="693" width="0.7063%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="26"/><text x="0.3587%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.24%)</title><rect x="0.5705%" y="677" width="0.2445%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="9"/><text x="0.8205%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.24%)</title><rect x="0.5705%" y="661" width="0.2445%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="9"/><text x="0.8205%" y="671.50"></text></g><g><title>__GI___libc_free (11 samples, 0.30%)</title><rect x="0.8150%" y="693" width="0.2988%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="11"/><text x="1.0650%" y="703.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="1.1138%" y="693" width="0.1087%" height="15" fill="rgb(206,188,39)" fg:x="41" fg:w="4"/><text x="1.3638%" y="703.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="1.2225%" y="693" width="0.0272%" height="15" fill="rgb(217,207,13)" fg:x="45" fg:w="1"/><text x="1.4725%" y="703.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="1.2497%" y="693" width="0.0272%" height="15" fill="rgb(231,73,38)" fg:x="46" fg:w="1"/><text x="1.4997%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="1.2497%" y="677" width="0.0272%" height="15" fill="rgb(225,20,46)" fg:x="46" fg:w="1"/><text x="1.4997%" y="687.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.03%)</title><rect x="1.2768%" y="693" width="0.0272%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="1"/><text x="1.5268%" y="703.50"></text></g><g><title>_int_malloc (3 samples, 0.08%)</title><rect x="1.3040%" y="693" width="0.0815%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="3"/><text x="1.5540%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="1.3855%" y="693" width="0.0272%" height="15" fill="rgb(226,26,5)" fg:x="51" fg:w="1"/><text x="1.6355%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.03%)</title><rect x="1.3855%" y="677" width="0.0272%" height="15" fill="rgb(249,33,26)" fg:x="51" fg:w="1"/><text x="1.6355%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="1.4127%" y="693" width="0.0272%" height="15" fill="rgb(235,183,28)" fg:x="52" fg:w="1"/><text x="1.6627%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="1.4127%" y="677" width="0.0272%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="1"/><text x="1.6627%" y="687.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="1.4127%" y="661" width="0.0272%" height="15" fill="rgb(247,18,42)" fg:x="52" fg:w="1"/><text x="1.6627%" y="671.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="1.4127%" y="645" width="0.0272%" height="15" fill="rgb(241,131,45)" fg:x="52" fg:w="1"/><text x="1.6627%" y="655.50"></text></g><g><title>chess::board::Board::apply_move (3 samples, 0.08%)</title><rect x="1.4398%" y="693" width="0.0815%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="3"/><text x="1.6898%" y="703.50"></text></g><g><title>chess::board::Board::compute_moves_for (11 samples, 0.30%)</title><rect x="1.5213%" y="693" width="0.2988%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="11"/><text x="1.7713%" y="703.50"></text></g><g><title>chess::board::Board::get_legal_moves (1 samples, 0.03%)</title><rect x="1.8202%" y="693" width="0.0272%" height="15" fill="rgb(238,160,17)" fg:x="67" fg:w="1"/><text x="2.0702%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.03%)</title><rect x="1.8202%" y="677" width="0.0272%" height="15" fill="rgb(214,148,48)" fg:x="67" fg:w="1"/><text x="2.0702%" y="687.50"></text></g><g><title>chess::board::Board::get_legal_moves::_{{closure}} (1 samples, 0.03%)</title><rect x="1.8202%" y="661" width="0.0272%" height="15" fill="rgb(232,36,49)" fg:x="67" fg:w="1"/><text x="2.0702%" y="671.50"></text></g><g><title>chess::board::Board::id (11 samples, 0.30%)</title><rect x="1.8473%" y="693" width="0.2988%" height="15" fill="rgb(209,103,24)" fg:x="68" fg:w="11"/><text x="2.0973%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (6 samples, 0.16%)</title><rect x="1.9832%" y="677" width="0.1630%" height="15" fill="rgb(229,88,8)" fg:x="73" fg:w="6"/><text x="2.2332%" y="687.50"></text></g><g><title>core::hash::Hasher::write_u8 (6 samples, 0.16%)</title><rect x="1.9832%" y="661" width="0.1630%" height="15" fill="rgb(213,181,19)" fg:x="73" fg:w="6"/><text x="2.2332%" y="671.50"></text></g><g><title>chess::board::Board::move_is_legal (8 samples, 0.22%)</title><rect x="2.1462%" y="693" width="0.2173%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="8"/><text x="2.3962%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;chess::board::Board&gt; (5 samples, 0.14%)</title><rect x="2.2277%" y="677" width="0.1358%" height="15" fill="rgb(241,83,37)" fg:x="82" fg:w="5"/><text x="2.4777%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::board::ChessMove&gt;&gt; (5 samples, 0.14%)</title><rect x="2.2277%" y="661" width="0.1358%" height="15" fill="rgb(233,36,39)" fg:x="82" fg:w="5"/><text x="2.4777%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::board::ChessMove&gt;&gt; (5 samples, 0.14%)</title><rect x="2.2277%" y="645" width="0.1358%" height="15" fill="rgb(226,3,54)" fg:x="82" fg:w="5"/><text x="2.4777%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="2.2277%" y="629" width="0.1358%" height="15" fill="rgb(245,192,40)" fg:x="82" fg:w="5"/><text x="2.4777%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.14%)</title><rect x="2.2277%" y="613" width="0.1358%" height="15" fill="rgb(238,167,29)" fg:x="82" fg:w="5"/><text x="2.4777%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.14%)</title><rect x="2.2277%" y="597" width="0.1358%" height="15" fill="rgb(232,182,51)" fg:x="82" fg:w="5"/><text x="2.4777%" y="607.50"></text></g><g><title>chess::v2::Manager::grow (1 samples, 0.03%)</title><rect x="2.3635%" y="693" width="0.0272%" height="15" fill="rgb(231,60,39)" fg:x="87" fg:w="1"/><text x="2.6135%" y="703.50"></text></g><g><title>chess::v2::Node::update_score (2 samples, 0.05%)</title><rect x="2.3907%" y="693" width="0.0543%" height="15" fill="rgb(208,69,12)" fg:x="88" fg:w="2"/><text x="2.6407%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (9 samples, 0.24%)</title><rect x="2.4722%" y="613" width="0.2445%" height="15" fill="rgb(235,93,37)" fg:x="91" fg:w="9"/><text x="2.7222%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (12 samples, 0.33%)</title><rect x="2.4450%" y="693" width="0.3260%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="12"/><text x="2.6950%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11 samples, 0.30%)</title><rect x="2.4722%" y="677" width="0.2988%" height="15" fill="rgb(222,207,29)" fg:x="91" fg:w="11"/><text x="2.7222%" y="687.50"></text></g><g><title>core::hash::Hash::hash_slice (11 samples, 0.30%)</title><rect x="2.4722%" y="661" width="0.2988%" height="15" fill="rgb(206,96,30)" fg:x="91" fg:w="11"/><text x="2.7222%" y="671.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (11 samples, 0.30%)</title><rect x="2.4722%" y="645" width="0.2988%" height="15" fill="rgb(218,138,4)" fg:x="91" fg:w="11"/><text x="2.7222%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11 samples, 0.30%)</title><rect x="2.4722%" y="629" width="0.2988%" height="15" fill="rgb(250,191,14)" fg:x="91" fg:w="11"/><text x="2.7222%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.05%)</title><rect x="2.7167%" y="613" width="0.0543%" height="15" fill="rgb(239,60,40)" fg:x="100" fg:w="2"/><text x="2.9667%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.05%)</title><rect x="2.7167%" y="597" width="0.0543%" height="15" fill="rgb(206,27,48)" fg:x="100" fg:w="2"/><text x="2.9667%" y="607.50"></text></g><g><title>[unknown] (104 samples, 2.83%)</title><rect x="0.0000%" y="709" width="2.8253%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="104"/><text x="0.2500%" y="719.50">[u..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.05%)</title><rect x="2.7710%" y="693" width="0.0543%" height="15" fill="rgb(250,213,24)" fg:x="102" fg:w="2"/><text x="3.0210%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="2.7982%" y="677" width="0.0272%" height="15" fill="rgb(247,123,22)" fg:x="103" fg:w="1"/><text x="3.0482%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.03%)</title><rect x="2.7982%" y="661" width="0.0272%" height="15" fill="rgb(231,138,38)" fg:x="103" fg:w="1"/><text x="3.0482%" y="671.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="2.7982%" y="645" width="0.0272%" height="15" fill="rgb(231,145,46)" fg:x="103" fg:w="1"/><text x="3.0482%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.14%)</title><rect x="2.8253%" y="693" width="0.1358%" height="15" fill="rgb(251,118,11)" fg:x="104" fg:w="5"/><text x="3.0753%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.08%)</title><rect x="3.0427%" y="389" width="0.0815%" height="15" fill="rgb(217,147,25)" fg:x="112" fg:w="3"/><text x="3.2927%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="3.0970%" y="373" width="0.0272%" height="15" fill="rgb(247,81,37)" fg:x="114" fg:w="1"/><text x="3.3470%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.98%)</title><rect x="3.4501%" y="357" width="0.9780%" height="15" fill="rgb(209,12,38)" fg:x="127" fg:w="36"/><text x="3.7001%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (106 samples, 2.88%)</title><rect x="3.4501%" y="373" width="2.8797%" height="15" fill="rgb(227,1,9)" fg:x="127" fg:w="106"/><text x="3.7001%" y="383.50">&lt;c..</text></g><g><title>chess::board::Board::apply_move::_{{closure}} (70 samples, 1.90%)</title><rect x="4.4281%" y="357" width="1.9017%" height="15" fill="rgb(248,47,43)" fg:x="163" fg:w="70"/><text x="4.6781%" y="367.50">c..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (70 samples, 1.90%)</title><rect x="4.4281%" y="341" width="1.9017%" height="15" fill="rgb(221,10,30)" fg:x="163" fg:w="70"/><text x="4.6781%" y="351.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (6 samples, 0.16%)</title><rect x="6.1668%" y="325" width="0.1630%" height="15" fill="rgb(210,229,1)" fg:x="227" fg:w="6"/><text x="6.4168%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (45 samples, 1.22%)</title><rect x="11.0568%" y="213" width="1.2225%" height="15" fill="rgb(222,148,37)" fg:x="407" fg:w="45"/><text x="11.3068%" y="223.50"></text></g><g><title>alloc_perturb (1 samples, 0.03%)</title><rect x="12.2793%" y="213" width="0.0272%" height="15" fill="rgb(234,67,33)" fg:x="452" fg:w="1"/><text x="12.5293%" y="223.50"></text></g><g><title>__GI___libc_malloc (78 samples, 2.12%)</title><rect x="10.2418%" y="245" width="2.1190%" height="15" fill="rgb(247,98,35)" fg:x="377" fg:w="78"/><text x="10.4918%" y="255.50">_..</text></g><g><title>_int_malloc (70 samples, 1.90%)</title><rect x="10.4591%" y="229" width="1.9017%" height="15" fill="rgb(247,138,52)" fg:x="385" fg:w="70"/><text x="10.7091%" y="239.50">_..</text></g><g><title>sysmalloc (2 samples, 0.05%)</title><rect x="12.3064%" y="213" width="0.0543%" height="15" fill="rgb(213,79,30)" fg:x="453" fg:w="2"/><text x="12.5564%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.05%)</title><rect x="12.3064%" y="197" width="0.0543%" height="15" fill="rgb(246,177,23)" fg:x="453" fg:w="2"/><text x="12.5564%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="12.3608%" y="245" width="0.0272%" height="15" fill="rgb(230,62,27)" fg:x="455" fg:w="1"/><text x="12.6108%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="12.3608%" y="229" width="0.0272%" height="15" fill="rgb(216,154,8)" fg:x="455" fg:w="1"/><text x="12.6108%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (81 samples, 2.20%)</title><rect x="10.2146%" y="357" width="2.2005%" height="15" fill="rgb(244,35,45)" fg:x="376" fg:w="81"/><text x="10.4646%" y="367.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (81 samples, 2.20%)</title><rect x="10.2146%" y="341" width="2.2005%" height="15" fill="rgb(251,115,12)" fg:x="376" fg:w="81"/><text x="10.4646%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 2.17%)</title><rect x="10.2418%" y="325" width="2.1733%" height="15" fill="rgb(240,54,50)" fg:x="377" fg:w="80"/><text x="10.4918%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 2.17%)</title><rect x="10.2418%" y="309" width="2.1733%" height="15" fill="rgb(233,84,52)" fg:x="377" fg:w="80"/><text x="10.4918%" y="319.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80 samples, 2.17%)</title><rect x="10.2418%" y="293" width="2.1733%" height="15" fill="rgb(207,117,47)" fg:x="377" fg:w="80"/><text x="10.4918%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 2.17%)</title><rect x="10.2418%" y="277" width="2.1733%" height="15" fill="rgb(249,43,39)" fg:x="377" fg:w="80"/><text x="10.4918%" y="287.50">a..</text></g><g><title>alloc::alloc::alloc (80 samples, 2.17%)</title><rect x="10.2418%" y="261" width="2.1733%" height="15" fill="rgb(209,38,44)" fg:x="377" fg:w="80"/><text x="10.4918%" y="271.50">a..</text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="12.3879%" y="245" width="0.0272%" height="15" fill="rgb(236,212,23)" fg:x="456" fg:w="1"/><text x="12.6379%" y="255.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (6 samples, 0.16%)</title><rect x="18.9079%" y="309" width="0.1630%" height="15" fill="rgb(242,79,21)" fg:x="696" fg:w="6"/><text x="19.1579%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (6 samples, 0.16%)</title><rect x="18.9079%" y="293" width="0.1630%" height="15" fill="rgb(211,96,35)" fg:x="696" fg:w="6"/><text x="19.1579%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.08%)</title><rect x="19.0709%" y="309" width="0.0815%" height="15" fill="rgb(253,215,40)" fg:x="702" fg:w="3"/><text x="19.3209%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20 samples, 0.54%)</title><rect x="18.7721%" y="325" width="0.5433%" height="15" fill="rgb(211,81,21)" fg:x="691" fg:w="20"/><text x="19.0221%" y="335.50"></text></g><g><title>core::mem::replace (6 samples, 0.16%)</title><rect x="19.1524%" y="309" width="0.1630%" height="15" fill="rgb(208,190,38)" fg:x="705" fg:w="6"/><text x="19.4024%" y="319.50"></text></g><g><title>core::mem::swap (6 samples, 0.16%)</title><rect x="19.1524%" y="293" width="0.1630%" height="15" fill="rgb(235,213,38)" fg:x="705" fg:w="6"/><text x="19.4024%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (6 samples, 0.16%)</title><rect x="19.1524%" y="277" width="0.1630%" height="15" fill="rgb(237,122,38)" fg:x="705" fg:w="6"/><text x="19.4024%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.16%)</title><rect x="19.1524%" y="261" width="0.1630%" height="15" fill="rgb(244,218,35)" fg:x="705" fg:w="6"/><text x="19.4024%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.68%)</title><rect x="18.7721%" y="341" width="0.6792%" height="15" fill="rgb(240,68,47)" fg:x="691" fg:w="25"/><text x="19.0221%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.14%)</title><rect x="19.3154%" y="325" width="0.1358%" height="15" fill="rgb(210,16,53)" fg:x="711" fg:w="5"/><text x="19.5654%" y="335.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (5 samples, 0.14%)</title><rect x="19.3154%" y="309" width="0.1358%" height="15" fill="rgb(235,124,12)" fg:x="711" fg:w="5"/><text x="19.5654%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (5 samples, 0.14%)</title><rect x="19.3154%" y="293" width="0.1358%" height="15" fill="rgb(224,169,11)" fg:x="711" fg:w="5"/><text x="19.5654%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (5 samples, 0.14%)</title><rect x="19.3154%" y="277" width="0.1358%" height="15" fill="rgb(250,166,2)" fg:x="711" fg:w="5"/><text x="19.5654%" y="287.50"></text></g><g><title>core::ptr::read (5 samples, 0.14%)</title><rect x="19.3154%" y="261" width="0.1358%" height="15" fill="rgb(242,216,29)" fg:x="711" fg:w="5"/><text x="19.5654%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.08%)</title><rect x="21.1899%" y="309" width="0.0815%" height="15" fill="rgb(230,116,27)" fg:x="780" fg:w="3"/><text x="21.4399%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="21.2171%" y="293" width="0.0543%" height="15" fill="rgb(228,99,48)" fg:x="781" fg:w="2"/><text x="21.4671%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.05%)</title><rect x="21.2171%" y="277" width="0.0543%" height="15" fill="rgb(253,11,6)" fg:x="781" fg:w="2"/><text x="21.4671%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.05%)</title><rect x="21.2171%" y="261" width="0.0543%" height="15" fill="rgb(247,143,39)" fg:x="781" fg:w="2"/><text x="21.4671%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="21.2442%" y="245" width="0.0272%" height="15" fill="rgb(236,97,10)" fg:x="782" fg:w="1"/><text x="21.4942%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="21.2442%" y="229" width="0.0272%" height="15" fill="rgb(233,208,19)" fg:x="782" fg:w="1"/><text x="21.4942%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="21.2442%" y="213" width="0.0272%" height="15" fill="rgb(216,164,2)" fg:x="782" fg:w="1"/><text x="21.4942%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="21.2442%" y="197" width="0.0272%" height="15" fill="rgb(220,129,5)" fg:x="782" fg:w="1"/><text x="21.4942%" y="207.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="21.2442%" y="181" width="0.0272%" height="15" fill="rgb(242,17,10)" fg:x="782" fg:w="1"/><text x="21.4942%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (127 samples, 3.45%)</title><rect x="20.5922%" y="325" width="3.4501%" height="15" fill="rgb(242,107,0)" fg:x="758" fg:w="127"/><text x="20.8422%" y="335.50">all..</text></g><g><title>core::ptr::write (102 samples, 2.77%)</title><rect x="21.2714%" y="309" width="2.7710%" height="15" fill="rgb(251,28,31)" fg:x="783" fg:w="102"/><text x="21.5214%" y="319.50">co..</text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (15 samples, 0.41%)</title><rect x="24.0424%" y="325" width="0.4075%" height="15" fill="rgb(233,223,10)" fg:x="885" fg:w="15"/><text x="24.2924%" y="335.50"></text></g><g><title>chess::board::ChessMove::from_delta (15 samples, 0.41%)</title><rect x="24.0424%" y="309" width="0.4075%" height="15" fill="rgb(215,21,27)" fg:x="885" fg:w="15"/><text x="24.2924%" y="319.50"></text></g><g><title>chess::board::ChessMove::within (7 samples, 0.19%)</title><rect x="24.2597%" y="293" width="0.1902%" height="15" fill="rgb(232,23,21)" fg:x="893" fg:w="7"/><text x="24.5097%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.16%)</title><rect x="24.4499%" y="325" width="0.1630%" height="15" fill="rgb(244,5,23)" fg:x="900" fg:w="6"/><text x="24.6999%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (6 samples, 0.16%)</title><rect x="24.4499%" y="309" width="0.1630%" height="15" fill="rgb(226,81,46)" fg:x="900" fg:w="6"/><text x="24.6999%" y="319.50"></text></g><g><title>chess::board::Board::possible_move_line (240 samples, 6.52%)</title><rect x="19.4512%" y="341" width="6.5200%" height="15" fill="rgb(247,70,30)" fg:x="716" fg:w="240"/><text x="19.7012%" y="351.50">chess::bo..</text></g><g><title>core::option::Option&lt;T&gt;::filter (50 samples, 1.36%)</title><rect x="24.6129%" y="325" width="1.3583%" height="15" fill="rgb(212,68,19)" fg:x="906" fg:w="50"/><text x="24.8629%" y="335.50"></text></g><g><title>chess::board::Board::possible_move_line::_{{closure}} (36 samples, 0.98%)</title><rect x="24.9932%" y="309" width="0.9780%" height="15" fill="rgb(240,187,13)" fg:x="920" fg:w="36"/><text x="25.2432%" y="319.50"></text></g><g><title>chess::board::Board::move_is_possible (36 samples, 0.98%)</title><rect x="24.9932%" y="293" width="0.9780%" height="15" fill="rgb(223,113,26)" fg:x="920" fg:w="36"/><text x="25.2432%" y="303.50"></text></g><g><title>chess::board::Board::piece_at (28 samples, 0.76%)</title><rect x="25.2105%" y="277" width="0.7607%" height="15" fill="rgb(206,192,2)" fg:x="928" fg:w="28"/><text x="25.4605%" y="287.50"></text></g><g><title>chess::board::ChessMove::from_delta (36 samples, 0.98%)</title><rect x="25.9712%" y="341" width="0.9780%" height="15" fill="rgb(241,108,4)" fg:x="956" fg:w="36"/><text x="26.2212%" y="351.50"></text></g><g><title>chess::board::ChessMove::within (18 samples, 0.49%)</title><rect x="26.4602%" y="325" width="0.4890%" height="15" fill="rgb(247,173,49)" fg:x="974" fg:w="18"/><text x="26.7102%" y="335.50"></text></g><g><title>chess::board::Board::move_is_possible (78 samples, 2.12%)</title><rect x="28.2804%" y="309" width="2.1190%" height="15" fill="rgb(224,114,35)" fg:x="1041" fg:w="78"/><text x="28.5304%" y="319.50">c..</text></g><g><title>chess::board::Board::piece_at (70 samples, 1.90%)</title><rect x="28.4977%" y="293" width="1.9017%" height="15" fill="rgb(245,159,27)" fg:x="1049" fg:w="70"/><text x="28.7477%" y="303.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::filter (138 samples, 3.75%)</title><rect x="26.9492%" y="341" width="3.7490%" height="15" fill="rgb(245,172,44)" fg:x="992" fg:w="138"/><text x="27.1992%" y="351.50">core..</text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (89 samples, 2.42%)</title><rect x="28.2804%" y="325" width="2.4178%" height="15" fill="rgb(236,23,11)" fg:x="1041" fg:w="89"/><text x="28.5304%" y="335.50">ch..</text></g><g><title>chess::board::Board::move_is_take (11 samples, 0.30%)</title><rect x="30.3993%" y="309" width="0.2988%" height="15" fill="rgb(205,117,38)" fg:x="1119" fg:w="11"/><text x="30.6493%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="31.1057%" y="293" width="0.0272%" height="15" fill="rgb(237,72,25)" fg:x="1145" fg:w="1"/><text x="31.3557%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="31.1328%" y="293" width="0.0543%" height="15" fill="rgb(244,70,9)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="31.1328%" y="277" width="0.0543%" height="15" fill="rgb(217,125,39)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.05%)</title><rect x="31.1328%" y="261" width="0.0543%" height="15" fill="rgb(235,36,10)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.05%)</title><rect x="31.1328%" y="245" width="0.0543%" height="15" fill="rgb(251,123,47)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="31.1328%" y="229" width="0.0543%" height="15" fill="rgb(221,13,13)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.05%)</title><rect x="31.1328%" y="213" width="0.0543%" height="15" fill="rgb(238,131,9)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.05%)</title><rect x="31.1328%" y="197" width="0.0543%" height="15" fill="rgb(211,50,8)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="207.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.05%)</title><rect x="31.1328%" y="181" width="0.0543%" height="15" fill="rgb(245,182,24)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="191.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.05%)</title><rect x="31.1328%" y="165" width="0.0543%" height="15" fill="rgb(242,14,37)" fg:x="1146" fg:w="2"/><text x="31.3828%" y="175.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="31.1600%" y="149" width="0.0272%" height="15" fill="rgb(246,228,12)" fg:x="1147" fg:w="1"/><text x="31.4100%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.03%)</title><rect x="31.1600%" y="133" width="0.0272%" height="15" fill="rgb(213,55,15)" fg:x="1147" fg:w="1"/><text x="31.4100%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="31.1872%" y="293" width="0.0272%" height="15" fill="rgb(209,9,3)" fg:x="1148" fg:w="1"/><text x="31.4372%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="31.1872%" y="277" width="0.0272%" height="15" fill="rgb(230,59,30)" fg:x="1148" fg:w="1"/><text x="31.4372%" y="287.50"></text></g><g><title>chess::board::Board::get_possible_moves_for_piece (729 samples, 19.80%)</title><rect x="12.4151%" y="357" width="19.8044%" height="15" fill="rgb(209,121,21)" fg:x="457" fg:w="729"/><text x="12.6651%" y="367.50">chess::board::Board::get_possib..</text></g><g><title>core::option::Option&lt;T&gt;::map (56 samples, 1.52%)</title><rect x="30.6982%" y="341" width="1.5213%" height="15" fill="rgb(220,109,13)" fg:x="1130" fg:w="56"/><text x="30.9482%" y="351.50"></text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (56 samples, 1.52%)</title><rect x="30.6982%" y="325" width="1.5213%" height="15" fill="rgb(232,18,1)" fg:x="1130" fg:w="56"/><text x="30.9482%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (56 samples, 1.52%)</title><rect x="30.6982%" y="309" width="1.5213%" height="15" fill="rgb(215,41,42)" fg:x="1130" fg:w="56"/><text x="30.9482%" y="319.50"></text></g><g><title>core::ptr::write (37 samples, 1.01%)</title><rect x="31.2143%" y="293" width="1.0052%" height="15" fill="rgb(224,123,36)" fg:x="1149" fg:w="37"/><text x="31.4643%" y="303.50"></text></g><g><title>chess::board::Board::team_owns_piece (52 samples, 1.41%)</title><rect x="32.2195%" y="357" width="1.4127%" height="15" fill="rgb(240,125,3)" fg:x="1186" fg:w="52"/><text x="32.4695%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.05%)</title><rect x="36.7835%" y="341" width="0.0543%" height="15" fill="rgb(205,98,50)" fg:x="1354" fg:w="2"/><text x="37.0335%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.05%)</title><rect x="36.7835%" y="325" width="0.0543%" height="15" fill="rgb(205,185,37)" fg:x="1354" fg:w="2"/><text x="37.0335%" y="335.50"></text></g><g><title>chess::board::Board::compute_moves_for (1,139 samples, 30.94%)</title><rect x="6.3298%" y="373" width="30.9427%" height="15" fill="rgb(238,207,15)" fg:x="233" fg:w="1139"/><text x="6.5798%" y="383.50">chess::board::Board::compute_moves_for</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (134 samples, 3.64%)</title><rect x="33.6322%" y="357" width="3.6403%" height="15" fill="rgb(213,199,42)" fg:x="1238" fg:w="134"/><text x="33.8822%" y="367.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (16 samples, 0.43%)</title><rect x="36.8378%" y="341" width="0.4347%" height="15" fill="rgb(235,201,11)" fg:x="1356" fg:w="16"/><text x="37.0878%" y="351.50"></text></g><g><title>chess::board::Board::piece_at (1 samples, 0.03%)</title><rect x="38.2233%" y="357" width="0.0272%" height="15" fill="rgb(207,46,11)" fg:x="1407" fg:w="1"/><text x="38.4733%" y="367.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.11%)</title><rect x="38.3048%" y="341" width="0.1087%" height="15" fill="rgb(241,35,35)" fg:x="1410" fg:w="4"/><text x="38.5548%" y="351.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (4 samples, 0.11%)</title><rect x="38.3048%" y="325" width="0.1087%" height="15" fill="rgb(243,32,47)" fg:x="1410" fg:w="4"/><text x="38.5548%" y="335.50"></text></g><g><title>chess::board::Board::find_piece (51 samples, 1.39%)</title><rect x="37.2725%" y="373" width="1.3855%" height="15" fill="rgb(247,202,23)" fg:x="1372" fg:w="51"/><text x="37.5225%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.41%)</title><rect x="38.2505%" y="357" width="0.4075%" height="15" fill="rgb(219,102,11)" fg:x="1408" fg:w="15"/><text x="38.5005%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (9 samples, 0.24%)</title><rect x="38.4135%" y="341" width="0.2445%" height="15" fill="rgb(243,110,44)" fg:x="1414" fg:w="9"/><text x="38.6635%" y="351.50"></text></g><g><title>chess::board::Board::new (1 samples, 0.03%)</title><rect x="38.6580%" y="373" width="0.0272%" height="15" fill="rgb(222,74,54)" fg:x="1423" fg:w="1"/><text x="38.9080%" y="383.50"></text></g><g><title>chess::board::Board::apply_move (1,310 samples, 35.59%)</title><rect x="3.1242%" y="389" width="35.5882%" height="15" fill="rgb(216,99,12)" fg:x="115" fg:w="1310"/><text x="3.3742%" y="399.50">chess::board::Board::apply_move</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::board::ChessMove&gt;&gt; (1 samples, 0.03%)</title><rect x="38.6851%" y="373" width="0.0272%" height="15" fill="rgb(226,22,26)" fg:x="1424" fg:w="1"/><text x="38.9351%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::board::ChessMove&gt;&gt; (1 samples, 0.03%)</title><rect x="38.6851%" y="357" width="0.0272%" height="15" fill="rgb(217,163,10)" fg:x="1424" fg:w="1"/><text x="38.9351%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="38.6851%" y="341" width="0.0272%" height="15" fill="rgb(213,25,53)" fg:x="1424" fg:w="1"/><text x="38.9351%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="38.6851%" y="325" width="0.0272%" height="15" fill="rgb(252,105,26)" fg:x="1424" fg:w="1"/><text x="38.9351%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="38.9840%" y="293" width="0.0543%" height="15" fill="rgb(220,39,43)" fg:x="1435" fg:w="2"/><text x="39.2340%" y="303.50"></text></g><g><title>&lt;chess::board::ChessMove as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="39.0655%" y="245" width="0.0272%" height="15" fill="rgb(229,68,48)" fg:x="1438" fg:w="1"/><text x="39.3155%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.68%)</title><rect x="39.0926%" y="245" width="0.6792%" height="15" fill="rgb(252,8,32)" fg:x="1439" fg:w="25"/><text x="39.3426%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.38%)</title><rect x="39.3915%" y="229" width="0.3803%" height="15" fill="rgb(223,20,43)" fg:x="1450" fg:w="14"/><text x="39.6415%" y="239.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.38%)</title><rect x="39.3915%" y="213" width="0.3803%" height="15" fill="rgb(229,81,49)" fg:x="1450" fg:w="14"/><text x="39.6415%" y="223.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.19%)</title><rect x="39.7990%" y="149" width="0.1902%" height="15" fill="rgb(236,28,36)" fg:x="1465" fg:w="7"/><text x="40.0490%" y="159.50"></text></g><g><title>tcache_get (4 samples, 0.11%)</title><rect x="39.8805%" y="133" width="0.1087%" height="15" fill="rgb(249,185,26)" fg:x="1468" fg:w="4"/><text x="40.1305%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.27%)</title><rect x="39.7990%" y="197" width="0.2717%" height="15" fill="rgb(249,174,33)" fg:x="1465" fg:w="10"/><text x="40.0490%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.27%)</title><rect x="39.7990%" y="181" width="0.2717%" height="15" fill="rgb(233,201,37)" fg:x="1465" fg:w="10"/><text x="40.0490%" y="191.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.27%)</title><rect x="39.7990%" y="165" width="0.2717%" height="15" fill="rgb(221,78,26)" fg:x="1465" fg:w="10"/><text x="40.0490%" y="175.50"></text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="39.9891%" y="149" width="0.0815%" height="15" fill="rgb(250,127,30)" fg:x="1472" fg:w="3"/><text x="40.2391%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.08%)</title><rect x="39.9891%" y="133" width="0.0815%" height="15" fill="rgb(230,49,44)" fg:x="1472" fg:w="3"/><text x="40.2391%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.05%)</title><rect x="40.0706%" y="197" width="0.0543%" height="15" fill="rgb(229,67,23)" fg:x="1475" fg:w="2"/><text x="40.3206%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.38%)</title><rect x="39.7718%" y="245" width="0.3803%" height="15" fill="rgb(249,83,47)" fg:x="1464" fg:w="14"/><text x="40.0218%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.35%)</title><rect x="39.7990%" y="229" width="0.3532%" height="15" fill="rgb(215,43,3)" fg:x="1465" fg:w="13"/><text x="40.0490%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.35%)</title><rect x="39.7990%" y="213" width="0.3532%" height="15" fill="rgb(238,154,13)" fg:x="1465" fg:w="13"/><text x="40.0490%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="40.1250%" y="197" width="0.0272%" height="15" fill="rgb(219,56,2)" fg:x="1477" fg:w="1"/><text x="40.3750%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.03%)</title><rect x="40.1250%" y="181" width="0.0272%" height="15" fill="rgb(233,0,4)" fg:x="1477" fg:w="1"/><text x="40.3750%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.03%)</title><rect x="40.1250%" y="165" width="0.0272%" height="15" fill="rgb(235,30,7)" fg:x="1477" fg:w="1"/><text x="40.3750%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.03%)</title><rect x="40.1250%" y="149" width="0.0272%" height="15" fill="rgb(250,79,13)" fg:x="1477" fg:w="1"/><text x="40.3750%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (72 samples, 1.96%)</title><rect x="38.9840%" y="309" width="1.9560%" height="15" fill="rgb(211,146,34)" fg:x="1435" fg:w="72"/><text x="39.2340%" y="319.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (70 samples, 1.90%)</title><rect x="39.0383%" y="293" width="1.9017%" height="15" fill="rgb(228,22,38)" fg:x="1437" fg:w="70"/><text x="39.2883%" y="303.50">a..</text></g><g><title>alloc::slice::hack::to_vec (70 samples, 1.90%)</title><rect x="39.0383%" y="277" width="1.9017%" height="15" fill="rgb(235,168,5)" fg:x="1437" fg:w="70"/><text x="39.2883%" y="287.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (70 samples, 1.90%)</title><rect x="39.0383%" y="261" width="1.9017%" height="15" fill="rgb(221,155,16)" fg:x="1437" fg:w="70"/><text x="39.2883%" y="271.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (29 samples, 0.79%)</title><rect x="40.1521%" y="245" width="0.7878%" height="15" fill="rgb(215,215,53)" fg:x="1478" fg:w="29"/><text x="40.4021%" y="255.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.05%)</title><rect x="40.9400%" y="309" width="0.0543%" height="15" fill="rgb(223,4,10)" fg:x="1507" fg:w="2"/><text x="41.1900%" y="319.50"></text></g><g><title>&lt;chess::board::Board as core::clone::Clone&gt;::clone (82 samples, 2.23%)</title><rect x="38.7938%" y="325" width="2.2277%" height="15" fill="rgb(234,103,6)" fg:x="1428" fg:w="82"/><text x="39.0438%" y="335.50">&lt;..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for bool&gt;::clone (1 samples, 0.03%)</title><rect x="40.9943%" y="309" width="0.0272%" height="15" fill="rgb(227,97,0)" fg:x="1509" fg:w="1"/><text x="41.2443%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.90%)</title><rect x="41.5920%" y="293" width="0.8965%" height="15" fill="rgb(234,150,53)" fg:x="1531" fg:w="33"/><text x="41.8420%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (111 samples, 3.02%)</title><rect x="41.5920%" y="309" width="3.0155%" height="15" fill="rgb(228,201,54)" fg:x="1531" fg:w="111"/><text x="41.8420%" y="319.50">&lt;co..</text></g><g><title>chess::board::Board::apply_move::_{{closure}} (78 samples, 2.12%)</title><rect x="42.4885%" y="293" width="2.1190%" height="15" fill="rgb(222,22,37)" fg:x="1564" fg:w="78"/><text x="42.7385%" y="303.50">c..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (78 samples, 2.12%)</title><rect x="42.4885%" y="277" width="2.1190%" height="15" fill="rgb(237,53,32)" fg:x="1564" fg:w="78"/><text x="42.7385%" y="287.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (6 samples, 0.16%)</title><rect x="44.4444%" y="261" width="0.1630%" height="15" fill="rgb(233,25,53)" fg:x="1636" fg:w="6"/><text x="44.6944%" y="271.50"></text></g><g><title>_int_malloc (8 samples, 0.22%)</title><rect x="49.6061%" y="165" width="0.2173%" height="15" fill="rgb(210,40,34)" fg:x="1826" fg:w="8"/><text x="49.8561%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.05%)</title><rect x="49.7691%" y="149" width="0.0543%" height="15" fill="rgb(241,220,44)" fg:x="1832" fg:w="2"/><text x="50.0191%" y="159.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.46%)</title><rect x="49.4431%" y="181" width="0.4618%" height="15" fill="rgb(235,28,35)" fg:x="1820" fg:w="17"/><text x="49.6931%" y="191.50"></text></g><g><title>tcache_get (3 samples, 0.08%)</title><rect x="49.8234%" y="165" width="0.0815%" height="15" fill="rgb(210,56,17)" fg:x="1834" fg:w="3"/><text x="50.0734%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (24 samples, 0.65%)</title><rect x="49.3344%" y="293" width="0.6520%" height="15" fill="rgb(224,130,29)" fg:x="1816" fg:w="24"/><text x="49.5844%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.65%)</title><rect x="49.3344%" y="277" width="0.6520%" height="15" fill="rgb(235,212,8)" fg:x="1816" fg:w="24"/><text x="49.5844%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.57%)</title><rect x="49.4159%" y="261" width="0.5705%" height="15" fill="rgb(223,33,50)" fg:x="1819" fg:w="21"/><text x="49.6659%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.57%)</title><rect x="49.4159%" y="245" width="0.5705%" height="15" fill="rgb(219,149,13)" fg:x="1819" fg:w="21"/><text x="49.6659%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.57%)</title><rect x="49.4159%" y="229" width="0.5705%" height="15" fill="rgb(250,156,29)" fg:x="1819" fg:w="21"/><text x="49.6659%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.57%)</title><rect x="49.4159%" y="213" width="0.5705%" height="15" fill="rgb(216,193,19)" fg:x="1819" fg:w="21"/><text x="49.6659%" y="223.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.57%)</title><rect x="49.4159%" y="197" width="0.5705%" height="15" fill="rgb(216,135,14)" fg:x="1819" fg:w="21"/><text x="49.6659%" y="207.50"></text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="49.9049%" y="181" width="0.0815%" height="15" fill="rgb(241,47,5)" fg:x="1837" fg:w="3"/><text x="50.1549%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.08%)</title><rect x="49.9049%" y="165" width="0.0815%" height="15" fill="rgb(233,42,35)" fg:x="1837" fg:w="3"/><text x="50.1549%" y="175.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (7 samples, 0.19%)</title><rect x="57.0497%" y="245" width="0.1902%" height="15" fill="rgb(231,13,6)" fg:x="2100" fg:w="7"/><text x="57.2997%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (7 samples, 0.19%)</title><rect x="57.0497%" y="229" width="0.1902%" height="15" fill="rgb(207,181,40)" fg:x="2100" fg:w="7"/><text x="57.2997%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.05%)</title><rect x="57.2399%" y="245" width="0.0543%" height="15" fill="rgb(254,173,49)" fg:x="2107" fg:w="2"/><text x="57.4899%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (27 samples, 0.73%)</title><rect x="56.7509%" y="261" width="0.7335%" height="15" fill="rgb(221,1,38)" fg:x="2089" fg:w="27"/><text x="57.0009%" y="271.50"></text></g><g><title>core::mem::replace (7 samples, 0.19%)</title><rect x="57.2942%" y="245" width="0.1902%" height="15" fill="rgb(206,124,46)" fg:x="2109" fg:w="7"/><text x="57.5442%" y="255.50"></text></g><g><title>core::mem::swap (7 samples, 0.19%)</title><rect x="57.2942%" y="229" width="0.1902%" height="15" fill="rgb(249,21,11)" fg:x="2109" fg:w="7"/><text x="57.5442%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (7 samples, 0.19%)</title><rect x="57.2942%" y="213" width="0.1902%" height="15" fill="rgb(222,201,40)" fg:x="2109" fg:w="7"/><text x="57.5442%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.19%)</title><rect x="57.2942%" y="197" width="0.1902%" height="15" fill="rgb(235,61,29)" fg:x="2109" fg:w="7"/><text x="57.5442%" y="207.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.90%)</title><rect x="56.7509%" y="277" width="0.8965%" height="15" fill="rgb(219,207,3)" fg:x="2089" fg:w="33"/><text x="57.0009%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 0.16%)</title><rect x="57.4844%" y="261" width="0.1630%" height="15" fill="rgb(222,56,46)" fg:x="2116" fg:w="6"/><text x="57.7344%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (6 samples, 0.16%)</title><rect x="57.4844%" y="245" width="0.1630%" height="15" fill="rgb(239,76,54)" fg:x="2116" fg:w="6"/><text x="57.7344%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (6 samples, 0.16%)</title><rect x="57.4844%" y="229" width="0.1630%" height="15" fill="rgb(231,124,27)" fg:x="2116" fg:w="6"/><text x="57.7344%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (6 samples, 0.16%)</title><rect x="57.4844%" y="213" width="0.1630%" height="15" fill="rgb(249,195,6)" fg:x="2116" fg:w="6"/><text x="57.7344%" y="223.50"></text></g><g><title>core::ptr::read (6 samples, 0.16%)</title><rect x="57.4844%" y="197" width="0.1630%" height="15" fill="rgb(237,174,47)" fg:x="2116" fg:w="6"/><text x="57.7344%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.05%)</title><rect x="59.1959%" y="85" width="0.0543%" height="15" fill="rgb(206,201,31)" fg:x="2179" fg:w="2"/><text x="59.4459%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.14%)</title><rect x="59.1959%" y="245" width="0.1358%" height="15" fill="rgb(231,57,52)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.14%)</title><rect x="59.1959%" y="229" width="0.1358%" height="15" fill="rgb(248,177,22)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.14%)</title><rect x="59.1959%" y="213" width="0.1358%" height="15" fill="rgb(215,211,37)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.14%)</title><rect x="59.1959%" y="197" width="0.1358%" height="15" fill="rgb(241,128,51)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.14%)</title><rect x="59.1959%" y="181" width="0.1358%" height="15" fill="rgb(227,165,31)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.14%)</title><rect x="59.1959%" y="165" width="0.1358%" height="15" fill="rgb(228,167,24)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.14%)</title><rect x="59.1959%" y="149" width="0.1358%" height="15" fill="rgb(228,143,12)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="159.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.14%)</title><rect x="59.1959%" y="133" width="0.1358%" height="15" fill="rgb(249,149,8)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="143.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.14%)</title><rect x="59.1959%" y="117" width="0.1358%" height="15" fill="rgb(243,35,44)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="127.50"></text></g><g><title>_int_realloc (5 samples, 0.14%)</title><rect x="59.1959%" y="101" width="0.1358%" height="15" fill="rgb(246,89,9)" fg:x="2179" fg:w="5"/><text x="59.4459%" y="111.50"></text></g><g><title>_int_malloc (3 samples, 0.08%)</title><rect x="59.2502%" y="85" width="0.0815%" height="15" fill="rgb(233,213,13)" fg:x="2181" fg:w="3"/><text x="59.5002%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (118 samples, 3.21%)</title><rect x="58.7612%" y="261" width="3.2057%" height="15" fill="rgb(233,141,41)" fg:x="2163" fg:w="118"/><text x="59.0112%" y="271.50">all..</text></g><g><title>core::ptr::write (97 samples, 2.64%)</title><rect x="59.3317%" y="245" width="2.6352%" height="15" fill="rgb(239,167,4)" fg:x="2184" fg:w="97"/><text x="59.5817%" y="255.50">co..</text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (10 samples, 0.27%)</title><rect x="61.9669%" y="261" width="0.2717%" height="15" fill="rgb(209,217,16)" fg:x="2281" fg:w="10"/><text x="62.2169%" y="271.50"></text></g><g><title>chess::board::ChessMove::from_delta (10 samples, 0.27%)</title><rect x="61.9669%" y="245" width="0.2717%" height="15" fill="rgb(219,88,35)" fg:x="2281" fg:w="10"/><text x="62.2169%" y="255.50"></text></g><g><title>chess::board::ChessMove::within (4 samples, 0.11%)</title><rect x="62.1299%" y="229" width="0.1087%" height="15" fill="rgb(220,193,23)" fg:x="2287" fg:w="4"/><text x="62.3799%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.08%)</title><rect x="62.2385%" y="261" width="0.0815%" height="15" fill="rgb(230,90,52)" fg:x="2291" fg:w="3"/><text x="62.4885%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (3 samples, 0.08%)</title><rect x="62.2385%" y="245" width="0.0815%" height="15" fill="rgb(252,106,19)" fg:x="2291" fg:w="3"/><text x="62.4885%" y="255.50"></text></g><g><title>chess::board::Board::possible_move_line (213 samples, 5.79%)</title><rect x="57.6474%" y="277" width="5.7865%" height="15" fill="rgb(206,74,20)" fg:x="2122" fg:w="213"/><text x="57.8974%" y="287.50">chess::..</text></g><g><title>core::option::Option&lt;T&gt;::filter (41 samples, 1.11%)</title><rect x="62.3200%" y="261" width="1.1138%" height="15" fill="rgb(230,138,44)" fg:x="2294" fg:w="41"/><text x="62.5700%" y="271.50"></text></g><g><title>chess::board::Board::possible_move_line::_{{closure}} (22 samples, 0.60%)</title><rect x="62.8362%" y="245" width="0.5977%" height="15" fill="rgb(235,182,43)" fg:x="2313" fg:w="22"/><text x="63.0862%" y="255.50"></text></g><g><title>chess::board::Board::move_is_possible (22 samples, 0.60%)</title><rect x="62.8362%" y="229" width="0.5977%" height="15" fill="rgb(242,16,51)" fg:x="2313" fg:w="22"/><text x="63.0862%" y="239.50"></text></g><g><title>chess::board::Board::piece_at (17 samples, 0.46%)</title><rect x="62.9720%" y="213" width="0.4618%" height="15" fill="rgb(248,9,4)" fg:x="2318" fg:w="17"/><text x="63.2220%" y="223.50"></text></g><g><title>chess::board::ChessMove::from_delta (43 samples, 1.17%)</title><rect x="63.4338%" y="277" width="1.1682%" height="15" fill="rgb(210,31,22)" fg:x="2335" fg:w="43"/><text x="63.6838%" y="287.50"></text></g><g><title>chess::board::ChessMove::within (22 samples, 0.60%)</title><rect x="64.0043%" y="261" width="0.5977%" height="15" fill="rgb(239,54,39)" fg:x="2356" fg:w="22"/><text x="64.2543%" y="271.50"></text></g><g><title>chess::board::Board::move_is_possible (58 samples, 1.58%)</title><rect x="66.2320%" y="245" width="1.5757%" height="15" fill="rgb(230,99,41)" fg:x="2438" fg:w="58"/><text x="66.4820%" y="255.50"></text></g><g><title>chess::board::Board::piece_at (56 samples, 1.52%)</title><rect x="66.2863%" y="229" width="1.5213%" height="15" fill="rgb(253,106,12)" fg:x="2440" fg:w="56"/><text x="66.5363%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (125 samples, 3.40%)</title><rect x="64.6020%" y="277" width="3.3958%" height="15" fill="rgb(213,46,41)" fg:x="2378" fg:w="125"/><text x="64.8520%" y="287.50">cor..</text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (65 samples, 1.77%)</title><rect x="66.2320%" y="261" width="1.7658%" height="15" fill="rgb(215,133,35)" fg:x="2438" fg:w="65"/><text x="66.4820%" y="271.50"></text></g><g><title>chess::board::Board::move_is_take (7 samples, 0.19%)</title><rect x="67.8077%" y="245" width="0.1902%" height="15" fill="rgb(213,28,5)" fg:x="2496" fg:w="7"/><text x="68.0577%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="68.4325%" y="229" width="0.0272%" height="15" fill="rgb(215,77,49)" fg:x="2519" fg:w="1"/><text x="68.6825%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.03%)</title><rect x="68.4597%" y="165" width="0.0272%" height="15" fill="rgb(248,100,22)" fg:x="2520" fg:w="1"/><text x="68.7097%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.08%)</title><rect x="68.4597%" y="229" width="0.0815%" height="15" fill="rgb(208,67,9)" fg:x="2520" fg:w="3"/><text x="68.7097%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.08%)</title><rect x="68.4597%" y="213" width="0.0815%" height="15" fill="rgb(219,133,21)" fg:x="2520" fg:w="3"/><text x="68.7097%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.08%)</title><rect x="68.4597%" y="197" width="0.0815%" height="15" fill="rgb(246,46,29)" fg:x="2520" fg:w="3"/><text x="68.7097%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.08%)</title><rect x="68.4597%" y="181" width="0.0815%" height="15" fill="rgb(246,185,52)" fg:x="2520" fg:w="3"/><text x="68.7097%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="68.4868%" y="165" width="0.0543%" height="15" fill="rgb(252,136,11)" fg:x="2521" fg:w="2"/><text x="68.7368%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.05%)</title><rect x="68.4868%" y="149" width="0.0543%" height="15" fill="rgb(219,138,53)" fg:x="2521" fg:w="2"/><text x="68.7368%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.05%)</title><rect x="68.4868%" y="133" width="0.0543%" height="15" fill="rgb(211,51,23)" fg:x="2521" fg:w="2"/><text x="68.7368%" y="143.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.05%)</title><rect x="68.4868%" y="117" width="0.0543%" height="15" fill="rgb(247,221,28)" fg:x="2521" fg:w="2"/><text x="68.7368%" y="127.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.05%)</title><rect x="68.4868%" y="101" width="0.0543%" height="15" fill="rgb(251,222,45)" fg:x="2521" fg:w="2"/><text x="68.7368%" y="111.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="68.5140%" y="85" width="0.0272%" height="15" fill="rgb(217,162,53)" fg:x="2522" fg:w="1"/><text x="68.7640%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.03%)</title><rect x="68.5140%" y="69" width="0.0272%" height="15" fill="rgb(229,93,14)" fg:x="2522" fg:w="1"/><text x="68.7640%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.08%)</title><rect x="68.5412%" y="229" width="0.0815%" height="15" fill="rgb(209,67,49)" fg:x="2523" fg:w="3"/><text x="68.7912%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.08%)</title><rect x="68.5412%" y="213" width="0.0815%" height="15" fill="rgb(213,87,29)" fg:x="2523" fg:w="3"/><text x="68.7912%" y="223.50"></text></g><g><title>chess::board::Board::get_possible_moves_for_piece (715 samples, 19.42%)</title><rect x="49.9864%" y="293" width="19.4241%" height="15" fill="rgb(205,151,52)" fg:x="1840" fg:w="715"/><text x="50.2364%" y="303.50">chess::board::Board::get_possi..</text></g><g><title>core::option::Option&lt;T&gt;::map (52 samples, 1.41%)</title><rect x="67.9978%" y="277" width="1.4127%" height="15" fill="rgb(253,215,39)" fg:x="2503" fg:w="52"/><text x="68.2478%" y="287.50"></text></g><g><title>chess::board::Board::get_possible_moves_for_piece::_{{closure}} (52 samples, 1.41%)</title><rect x="67.9978%" y="261" width="1.4127%" height="15" fill="rgb(221,220,41)" fg:x="2503" fg:w="52"/><text x="68.2478%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (52 samples, 1.41%)</title><rect x="67.9978%" y="245" width="1.4127%" height="15" fill="rgb(218,133,21)" fg:x="2503" fg:w="52"/><text x="68.2478%" y="255.50"></text></g><g><title>core::ptr::write (29 samples, 0.79%)</title><rect x="68.6227%" y="229" width="0.7878%" height="15" fill="rgb(221,193,43)" fg:x="2526" fg:w="29"/><text x="68.8727%" y="239.50"></text></g><g><title>chess::board::Board::team_owns_piece (39 samples, 1.06%)</title><rect x="69.4105%" y="293" width="1.0595%" height="15" fill="rgb(240,128,52)" fg:x="2555" fg:w="39"/><text x="69.6605%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.14%)</title><rect x="75.6316%" y="277" width="0.1358%" height="15" fill="rgb(253,114,12)" fg:x="2784" fg:w="5"/><text x="75.8816%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (5 samples, 0.14%)</title><rect x="75.6316%" y="261" width="0.1358%" height="15" fill="rgb(215,223,47)" fg:x="2784" fg:w="5"/><text x="75.8816%" y="271.50"></text></g><g><title>chess::board::Board::compute_moves_for (1,172 samples, 31.84%)</title><rect x="44.6074%" y="309" width="31.8392%" height="15" fill="rgb(248,225,23)" fg:x="1642" fg:w="1172"/><text x="44.8574%" y="319.50">chess::board::Board::compute_moves_for</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (220 samples, 5.98%)</title><rect x="70.4700%" y="293" width="5.9766%" height="15" fill="rgb(250,108,0)" fg:x="2594" fg:w="220"/><text x="70.7200%" y="303.50">core::it..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (25 samples, 0.68%)</title><rect x="75.7675%" y="277" width="0.6792%" height="15" fill="rgb(228,208,7)" fg:x="2789" fg:w="25"/><text x="76.0175%" y="287.50"></text></g><g><title>chess::board::Board::piece_at (1 samples, 0.03%)</title><rect x="77.2073%" y="293" width="0.0272%" height="15" fill="rgb(244,45,10)" fg:x="2842" fg:w="1"/><text x="77.4573%" y="303.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.05%)</title><rect x="77.2888%" y="277" width="0.0543%" height="15" fill="rgb(207,125,25)" fg:x="2845" fg:w="2"/><text x="77.5388%" y="287.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (2 samples, 0.05%)</title><rect x="77.2888%" y="261" width="0.0543%" height="15" fill="rgb(210,195,18)" fg:x="2845" fg:w="2"/><text x="77.5388%" y="271.50"></text></g><g><title>chess::board::Board::find_piece (43 samples, 1.17%)</title><rect x="76.4466%" y="309" width="1.1682%" height="15" fill="rgb(249,80,12)" fg:x="2814" fg:w="43"/><text x="76.6966%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 0.38%)</title><rect x="77.2344%" y="293" width="0.3803%" height="15" fill="rgb(221,65,9)" fg:x="2843" fg:w="14"/><text x="77.4844%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (10 samples, 0.27%)</title><rect x="77.3431%" y="277" width="0.2717%" height="15" fill="rgb(235,49,36)" fg:x="2847" fg:w="10"/><text x="77.5931%" y="287.50"></text></g><g><title>chess::board::Board::apply_move (1,350 samples, 36.67%)</title><rect x="41.0215%" y="325" width="36.6748%" height="15" fill="rgb(225,32,20)" fg:x="1510" fg:w="1350"/><text x="41.2715%" y="335.50">chess::board::Board::apply_move</text></g><g><title>chess::board::Board::new (3 samples, 0.08%)</title><rect x="77.6148%" y="309" width="0.0815%" height="15" fill="rgb(215,141,46)" fg:x="2857" fg:w="3"/><text x="77.8648%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.54%)</title><rect x="77.6963%" y="261" width="0.5433%" height="15" fill="rgb(250,160,47)" fg:x="2860" fg:w="20"/><text x="77.9463%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.52%)</title><rect x="77.7234%" y="245" width="0.5162%" height="15" fill="rgb(216,222,40)" fg:x="2861" fg:w="19"/><text x="77.9734%" y="255.50"></text></g><g><title>__GI___libc_free (19 samples, 0.52%)</title><rect x="77.7234%" y="229" width="0.5162%" height="15" fill="rgb(234,217,39)" fg:x="2861" fg:w="19"/><text x="77.9734%" y="239.50"></text></g><g><title>_int_free (9 samples, 0.24%)</title><rect x="77.9951%" y="213" width="0.2445%" height="15" fill="rgb(207,178,40)" fg:x="2871" fg:w="9"/><text x="78.2451%" y="223.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="78.2124%" y="197" width="0.0272%" height="15" fill="rgb(221,136,13)" fg:x="2879" fg:w="1"/><text x="78.4624%" y="207.50"></text></g><g><title>chess::board::Board::get_legal_moves (1,457 samples, 39.58%)</title><rect x="38.7123%" y="389" width="39.5816%" height="15" fill="rgb(249,199,10)" fg:x="1425" fg:w="1457"/><text x="38.9623%" y="399.50">chess::board::Board::get_legal_moves</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1,455 samples, 39.53%)</title><rect x="38.7666%" y="373" width="39.5273%" height="15" fill="rgb(249,222,13)" fg:x="1427" fg:w="1455"/><text x="39.0166%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::retain</text></g><g><title>chess::board::Board::get_legal_moves::_{{closure}} (1,455 samples, 39.53%)</title><rect x="38.7666%" y="357" width="39.5273%" height="15" fill="rgb(244,185,38)" fg:x="1427" fg:w="1455"/><text x="39.0166%" y="367.50">chess::board::Board::get_legal_moves::_{{closure}}</text></g><g><title>chess::board::Board::move_is_legal (1,454 samples, 39.50%)</title><rect x="38.7938%" y="341" width="39.5001%" height="15" fill="rgb(236,202,9)" fg:x="1428" fg:w="1454"/><text x="39.0438%" y="351.50">chess::board::Board::move_is_legal</text></g><g><title>core::ptr::drop_in_place&lt;chess::board::Board&gt; (22 samples, 0.60%)</title><rect x="77.6963%" y="325" width="0.5977%" height="15" fill="rgb(250,229,37)" fg:x="2860" fg:w="22"/><text x="77.9463%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::board::ChessMove&gt;&gt; (22 samples, 0.60%)</title><rect x="77.6963%" y="309" width="0.5977%" height="15" fill="rgb(206,174,23)" fg:x="2860" fg:w="22"/><text x="77.9463%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::board::ChessMove&gt;&gt; (22 samples, 0.60%)</title><rect x="77.6963%" y="293" width="0.5977%" height="15" fill="rgb(211,33,43)" fg:x="2860" fg:w="22"/><text x="77.9463%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.60%)</title><rect x="77.6963%" y="277" width="0.5977%" height="15" fill="rgb(245,58,50)" fg:x="2860" fg:w="22"/><text x="77.9463%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.05%)</title><rect x="78.2396%" y="261" width="0.0543%" height="15" fill="rgb(244,68,36)" fg:x="2880" fg:w="2"/><text x="78.4896%" y="271.50"></text></g><g><title>chess::v2::ChessQueue::push (2 samples, 0.05%)</title><rect x="78.2939%" y="389" width="0.0543%" height="15" fill="rgb(232,229,15)" fg:x="2882" fg:w="2"/><text x="78.5439%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (2 samples, 0.05%)</title><rect x="78.2939%" y="373" width="0.0543%" height="15" fill="rgb(254,30,23)" fg:x="2882" fg:w="2"/><text x="78.5439%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1 samples, 0.03%)</title><rect x="78.3211%" y="357" width="0.0272%" height="15" fill="rgb(235,160,14)" fg:x="2883" fg:w="1"/><text x="78.5711%" y="367.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="78.3211%" y="341" width="0.0272%" height="15" fill="rgb(212,155,44)" fg:x="2883" fg:w="1"/><text x="78.5711%" y="351.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (24 samples, 0.65%)</title><rect x="78.5928%" y="373" width="0.6520%" height="15" fill="rgb(226,2,50)" fg:x="2893" fg:w="24"/><text x="78.8428%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.49%)</title><rect x="78.7558%" y="357" width="0.4890%" height="15" fill="rgb(234,177,6)" fg:x="2899" fg:w="18"/><text x="79.0058%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.49%)</title><rect x="78.7558%" y="341" width="0.4890%" height="15" fill="rgb(217,24,9)" fg:x="2899" fg:w="18"/><text x="79.0058%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.49%)</title><rect x="78.7558%" y="325" width="0.4890%" height="15" fill="rgb(220,13,46)" fg:x="2899" fg:w="18"/><text x="79.0058%" y="335.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.49%)</title><rect x="78.7558%" y="309" width="0.4890%" height="15" fill="rgb(239,221,27)" fg:x="2899" fg:w="18"/><text x="79.0058%" y="319.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.49%)</title><rect x="78.7558%" y="293" width="0.4890%" height="15" fill="rgb(222,198,25)" fg:x="2899" fg:w="18"/><text x="79.0058%" y="303.50"></text></g><g><title>_int_malloc (16 samples, 0.43%)</title><rect x="78.8101%" y="277" width="0.4347%" height="15" fill="rgb(211,99,13)" fg:x="2901" fg:w="16"/><text x="79.0601%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.16%)</title><rect x="79.0818%" y="261" width="0.1630%" height="15" fill="rgb(232,111,31)" fg:x="2911" fg:w="6"/><text x="79.3318%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="79.4893%" y="357" width="0.0272%" height="15" fill="rgb(245,82,37)" fg:x="2926" fg:w="1"/><text x="79.7393%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (1 samples, 0.03%)</title><rect x="79.5436%" y="293" width="0.0272%" height="15" fill="rgb(227,149,46)" fg:x="2928" fg:w="1"/><text x="79.7936%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="79.6523%" y="197" width="0.0272%" height="15" fill="rgb(218,36,50)" fg:x="2932" fg:w="1"/><text x="79.9023%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.46%)</title><rect x="79.5979%" y="277" width="0.4618%" height="15" fill="rgb(226,80,48)" fg:x="2930" fg:w="17"/><text x="79.8479%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.46%)</title><rect x="79.5979%" y="261" width="0.4618%" height="15" fill="rgb(238,224,15)" fg:x="2930" fg:w="17"/><text x="79.8479%" y="271.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.46%)</title><rect x="79.5979%" y="245" width="0.4618%" height="15" fill="rgb(241,136,10)" fg:x="2930" fg:w="17"/><text x="79.8479%" y="255.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.46%)</title><rect x="79.5979%" y="229" width="0.4618%" height="15" fill="rgb(208,32,45)" fg:x="2930" fg:w="17"/><text x="79.8479%" y="239.50"></text></g><g><title>_int_realloc (16 samples, 0.43%)</title><rect x="79.6251%" y="213" width="0.4347%" height="15" fill="rgb(207,135,9)" fg:x="2931" fg:w="16"/><text x="79.8751%" y="223.50"></text></g><g><title>_int_malloc (14 samples, 0.38%)</title><rect x="79.6794%" y="197" width="0.3803%" height="15" fill="rgb(206,86,44)" fg:x="2933" fg:w="14"/><text x="79.9294%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.19%)</title><rect x="79.8696%" y="181" width="0.1902%" height="15" fill="rgb(245,177,15)" fg:x="2940" fg:w="7"/><text x="80.1196%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (35 samples, 0.95%)</title><rect x="79.5164%" y="357" width="0.9508%" height="15" fill="rgb(206,64,50)" fg:x="2927" fg:w="35"/><text x="79.7664%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (35 samples, 0.95%)</title><rect x="79.5164%" y="341" width="0.9508%" height="15" fill="rgb(234,36,40)" fg:x="2927" fg:w="35"/><text x="79.7664%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (35 samples, 0.95%)</title><rect x="79.5164%" y="325" width="0.9508%" height="15" fill="rgb(213,64,8)" fg:x="2927" fg:w="35"/><text x="79.7664%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.95%)</title><rect x="79.5164%" y="309" width="0.9508%" height="15" fill="rgb(210,75,36)" fg:x="2927" fg:w="35"/><text x="79.7664%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.90%)</title><rect x="79.5708%" y="293" width="0.8965%" height="15" fill="rgb(229,88,21)" fg:x="2929" fg:w="33"/><text x="79.8208%" y="303.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.41%)</title><rect x="80.0598%" y="277" width="0.4075%" height="15" fill="rgb(252,204,47)" fg:x="2947" fg:w="15"/><text x="80.3098%" y="287.50"></text></g><g><title>_int_malloc (12 samples, 0.33%)</title><rect x="80.1413%" y="261" width="0.3260%" height="15" fill="rgb(208,77,27)" fg:x="2950" fg:w="12"/><text x="80.3913%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.11%)</title><rect x="80.3586%" y="245" width="0.1087%" height="15" fill="rgb(221,76,26)" fg:x="2958" fg:w="4"/><text x="80.6086%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="80.4673%" y="357" width="0.0272%" height="15" fill="rgb(225,139,18)" fg:x="2962" fg:w="1"/><text x="80.7173%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="80.4673%" y="341" width="0.0272%" height="15" fill="rgb(230,137,11)" fg:x="2962" fg:w="1"/><text x="80.7173%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (70 samples, 1.90%)</title><rect x="79.2448%" y="373" width="1.9017%" height="15" fill="rgb(212,28,1)" fg:x="2917" fg:w="70"/><text x="79.4948%" y="383.50">a..</text></g><g><title>core::ptr::write (24 samples, 0.65%)</title><rect x="80.4944%" y="357" width="0.6520%" height="15" fill="rgb(248,164,17)" fg:x="2963" fg:w="24"/><text x="80.7444%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.08%)</title><rect x="81.2551%" y="309" width="0.0815%" height="15" fill="rgb(222,171,42)" fg:x="2991" fg:w="3"/><text x="81.5051%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="81.3094%" y="293" width="0.0272%" height="15" fill="rgb(243,84,45)" fg:x="2993" fg:w="1"/><text x="81.5594%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.24%)</title><rect x="81.1464%" y="357" width="0.2445%" height="15" fill="rgb(252,49,23)" fg:x="2987" fg:w="9"/><text x="81.3964%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.24%)</title><rect x="81.1464%" y="341" width="0.2445%" height="15" fill="rgb(215,19,7)" fg:x="2987" fg:w="9"/><text x="81.3964%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.24%)</title><rect x="81.1464%" y="325" width="0.2445%" height="15" fill="rgb(238,81,41)" fg:x="2987" fg:w="9"/><text x="81.3964%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.05%)</title><rect x="81.3366%" y="309" width="0.0543%" height="15" fill="rgb(210,199,37)" fg:x="2994" fg:w="2"/><text x="81.5866%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="81.4724%" y="309" width="0.0272%" height="15" fill="rgb(244,192,49)" fg:x="2999" fg:w="1"/><text x="81.7224%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="81.3909%" y="357" width="0.1630%" height="15" fill="rgb(226,211,11)" fg:x="2996" fg:w="6"/><text x="81.6409%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="81.3909%" y="341" width="0.1630%" height="15" fill="rgb(236,162,54)" fg:x="2996" fg:w="6"/><text x="81.6409%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="81.3909%" y="325" width="0.1630%" height="15" fill="rgb(220,229,9)" fg:x="2996" fg:w="6"/><text x="81.6409%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.05%)</title><rect x="81.4996%" y="309" width="0.0543%" height="15" fill="rgb(250,87,22)" fg:x="3000" fg:w="2"/><text x="81.7496%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.16%)</title><rect x="82.4776%" y="197" width="0.1630%" height="15" fill="rgb(239,43,17)" fg:x="3036" fg:w="6"/><text x="82.7276%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.41%)</title><rect x="82.3418%" y="213" width="0.4075%" height="15" fill="rgb(231,177,25)" fg:x="3031" fg:w="15"/><text x="82.5918%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.11%)</title><rect x="82.6406%" y="197" width="0.1087%" height="15" fill="rgb(219,179,1)" fg:x="3042" fg:w="4"/><text x="82.8906%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (49 samples, 1.33%)</title><rect x="81.6083%" y="277" width="1.3312%" height="15" fill="rgb(238,219,53)" fg:x="3004" fg:w="49"/><text x="81.8583%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 1.33%)</title><rect x="81.6083%" y="261" width="1.3312%" height="15" fill="rgb(232,167,36)" fg:x="3004" fg:w="49"/><text x="81.8583%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (49 samples, 1.33%)</title><rect x="81.6083%" y="245" width="1.3312%" height="15" fill="rgb(244,19,51)" fg:x="3004" fg:w="49"/><text x="81.8583%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 1.33%)</title><rect x="81.6083%" y="229" width="1.3312%" height="15" fill="rgb(224,6,22)" fg:x="3004" fg:w="49"/><text x="81.8583%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.19%)</title><rect x="82.7493%" y="213" width="0.1902%" height="15" fill="rgb(224,145,5)" fg:x="3046" fg:w="7"/><text x="82.9993%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.16%)</title><rect x="84.0532%" y="181" width="0.1630%" height="15" fill="rgb(234,130,49)" fg:x="3094" fg:w="6"/><text x="84.3032%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.41%)</title><rect x="83.9446%" y="197" width="0.4075%" height="15" fill="rgb(254,6,2)" fg:x="3090" fg:w="15"/><text x="84.1946%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.14%)</title><rect x="84.2162%" y="181" width="0.1358%" height="15" fill="rgb(208,96,46)" fg:x="3100" fg:w="5"/><text x="84.4662%" y="191.50"></text></g><g><title>core::hash::Hash::hash_slice (112 samples, 3.04%)</title><rect x="81.6083%" y="325" width="3.0427%" height="15" fill="rgb(239,3,39)" fg:x="3004" fg:w="112"/><text x="81.8583%" y="335.50">cor..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (112 samples, 3.04%)</title><rect x="81.6083%" y="309" width="3.0427%" height="15" fill="rgb(233,210,1)" fg:x="3004" fg:w="112"/><text x="81.8583%" y="319.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (112 samples, 3.04%)</title><rect x="81.6083%" y="293" width="3.0427%" height="15" fill="rgb(244,137,37)" fg:x="3004" fg:w="112"/><text x="81.8583%" y="303.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (63 samples, 1.71%)</title><rect x="82.9394%" y="277" width="1.7115%" height="15" fill="rgb(240,136,2)" fg:x="3053" fg:w="63"/><text x="83.1894%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (63 samples, 1.71%)</title><rect x="82.9394%" y="261" width="1.7115%" height="15" fill="rgb(239,18,37)" fg:x="3053" fg:w="63"/><text x="83.1894%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (57 samples, 1.55%)</title><rect x="83.1024%" y="245" width="1.5485%" height="15" fill="rgb(218,185,22)" fg:x="3059" fg:w="57"/><text x="83.3524%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (57 samples, 1.55%)</title><rect x="83.1024%" y="229" width="1.5485%" height="15" fill="rgb(225,218,4)" fg:x="3059" fg:w="57"/><text x="83.3524%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (57 samples, 1.55%)</title><rect x="83.1024%" y="213" width="1.5485%" height="15" fill="rgb(230,182,32)" fg:x="3059" fg:w="57"/><text x="83.3524%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.30%)</title><rect x="84.3521%" y="197" width="0.2988%" height="15" fill="rgb(242,56,43)" fg:x="3105" fg:w="11"/><text x="84.6021%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.11%)</title><rect x="84.6781%" y="245" width="0.1087%" height="15" fill="rgb(233,99,24)" fg:x="3117" fg:w="4"/><text x="84.9281%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect x="84.7324%" y="229" width="0.0543%" height="15" fill="rgb(234,209,42)" fg:x="3119" fg:w="2"/><text x="84.9824%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (122 samples, 3.31%)</title><rect x="81.5539%" y="357" width="3.3143%" height="15" fill="rgb(227,7,12)" fg:x="3002" fg:w="122"/><text x="81.8039%" y="367.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (120 samples, 3.26%)</title><rect x="81.6083%" y="341" width="3.2600%" height="15" fill="rgb(245,203,43)" fg:x="3004" fg:w="120"/><text x="81.8583%" y="351.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (8 samples, 0.22%)</title><rect x="84.6509%" y="325" width="0.2173%" height="15" fill="rgb(238,205,33)" fg:x="3116" fg:w="8"/><text x="84.9009%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.22%)</title><rect x="84.6509%" y="309" width="0.2173%" height="15" fill="rgb(231,56,7)" fg:x="3116" fg:w="8"/><text x="84.9009%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.22%)</title><rect x="84.6509%" y="293" width="0.2173%" height="15" fill="rgb(244,186,29)" fg:x="3116" fg:w="8"/><text x="84.9009%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.22%)</title><rect x="84.6509%" y="277" width="0.2173%" height="15" fill="rgb(234,111,31)" fg:x="3116" fg:w="8"/><text x="84.9009%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.22%)</title><rect x="84.6509%" y="261" width="0.2173%" height="15" fill="rgb(241,149,10)" fg:x="3116" fg:w="8"/><text x="84.9009%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.08%)</title><rect x="84.7867%" y="245" width="0.0815%" height="15" fill="rgb(249,206,44)" fg:x="3121" fg:w="3"/><text x="85.0367%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (39 samples, 1.06%)</title><rect x="84.8682%" y="357" width="1.0595%" height="15" fill="rgb(251,153,30)" fg:x="3124" fg:w="39"/><text x="85.1182%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (37 samples, 1.01%)</title><rect x="84.9226%" y="341" width="1.0052%" height="15" fill="rgb(239,152,38)" fg:x="3126" fg:w="37"/><text x="85.1726%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.90%)</title><rect x="85.0312%" y="325" width="0.8965%" height="15" fill="rgb(249,139,47)" fg:x="3130" fg:w="33"/><text x="85.2812%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.90%)</title><rect x="85.0312%" y="309" width="0.8965%" height="15" fill="rgb(244,64,35)" fg:x="3130" fg:w="33"/><text x="85.2812%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.90%)</title><rect x="85.0312%" y="293" width="0.8965%" height="15" fill="rgb(216,46,15)" fg:x="3130" fg:w="33"/><text x="85.2812%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (18 samples, 0.49%)</title><rect x="85.4387%" y="277" width="0.4890%" height="15" fill="rgb(250,74,19)" fg:x="3145" fg:w="18"/><text x="85.6887%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (7 samples, 0.19%)</title><rect x="85.9277%" y="357" width="0.1902%" height="15" fill="rgb(249,42,33)" fg:x="3163" fg:w="7"/><text x="86.1777%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (7 samples, 0.19%)</title><rect x="85.9277%" y="341" width="0.1902%" height="15" fill="rgb(242,149,17)" fg:x="3163" fg:w="7"/><text x="86.1777%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="85.9549%" y="325" width="0.1630%" height="15" fill="rgb(244,29,21)" fg:x="3164" fg:w="6"/><text x="86.2049%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="85.9549%" y="309" width="0.1630%" height="15" fill="rgb(220,130,37)" fg:x="3164" fg:w="6"/><text x="86.2049%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.16%)</title><rect x="85.9549%" y="293" width="0.1630%" height="15" fill="rgb(211,67,2)" fg:x="3164" fg:w="6"/><text x="86.2049%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.08%)</title><rect x="86.0364%" y="277" width="0.0815%" height="15" fill="rgb(235,68,52)" fg:x="3167" fg:w="3"/><text x="86.2864%" y="287.50"></text></g><g><title>chess::board::Board::id (186 samples, 5.05%)</title><rect x="81.1464%" y="373" width="5.0530%" height="15" fill="rgb(246,142,3)" fg:x="2987" fg:w="186"/><text x="81.3964%" y="383.50">chess:..</text></g><g><title>std::collections::hash::map::DefaultHasher::new (3 samples, 0.08%)</title><rect x="86.1179%" y="357" width="0.0815%" height="15" fill="rgb(241,25,7)" fg:x="3170" fg:w="3"/><text x="86.3679%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.08%)</title><rect x="86.1179%" y="341" width="0.0815%" height="15" fill="rgb(242,119,39)" fg:x="3170" fg:w="3"/><text x="86.3679%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.08%)</title><rect x="86.1179%" y="325" width="0.0815%" height="15" fill="rgb(241,98,45)" fg:x="3170" fg:w="3"/><text x="86.3679%" y="335.50"></text></g><g><title>chess::board::Board::score (84 samples, 2.28%)</title><rect x="86.1994%" y="373" width="2.2820%" height="15" fill="rgb(254,28,30)" fg:x="3173" fg:w="84"/><text x="86.4494%" y="383.50">c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (42 samples, 1.14%)</title><rect x="88.4814%" y="373" width="1.1410%" height="15" fill="rgb(241,142,54)" fg:x="3257" fg:w="42"/><text x="88.7314%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (42 samples, 1.14%)</title><rect x="88.4814%" y="357" width="1.1410%" height="15" fill="rgb(222,85,15)" fg:x="3257" fg:w="42"/><text x="88.7314%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (42 samples, 1.14%)</title><rect x="88.4814%" y="341" width="1.1410%" height="15" fill="rgb(210,85,47)" fg:x="3257" fg:w="42"/><text x="88.7314%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="89.6224%" y="373" width="0.0272%" height="15" fill="rgb(224,206,25)" fg:x="3299" fg:w="1"/><text x="89.8724%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.14%)</title><rect x="89.6496%" y="309" width="0.1358%" height="15" fill="rgb(243,201,19)" fg:x="3300" fg:w="5"/><text x="89.8996%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.14%)</title><rect x="89.6496%" y="293" width="0.1358%" height="15" fill="rgb(236,59,4)" fg:x="3300" fg:w="5"/><text x="89.8996%" y="303.50"></text></g><g><title>__GI___libc_free (4 samples, 0.11%)</title><rect x="89.6767%" y="277" width="0.1087%" height="15" fill="rgb(254,179,45)" fg:x="3301" fg:w="4"/><text x="89.9267%" y="287.50"></text></g><g><title>_int_free (4 samples, 0.11%)</title><rect x="89.6767%" y="261" width="0.1087%" height="15" fill="rgb(226,14,10)" fg:x="3301" fg:w="4"/><text x="89.9267%" y="271.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="89.7582%" y="245" width="0.0272%" height="15" fill="rgb(244,27,41)" fg:x="3304" fg:w="1"/><text x="90.0082%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;chess::board::Board&gt; (6 samples, 0.16%)</title><rect x="89.6496%" y="373" width="0.1630%" height="15" fill="rgb(235,35,32)" fg:x="3300" fg:w="6"/><text x="89.8996%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::board::ChessMove&gt;&gt; (6 samples, 0.16%)</title><rect x="89.6496%" y="357" width="0.1630%" height="15" fill="rgb(218,68,31)" fg:x="3300" fg:w="6"/><text x="89.8996%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::board::ChessMove&gt;&gt; (6 samples, 0.16%)</title><rect x="89.6496%" y="341" width="0.1630%" height="15" fill="rgb(207,120,37)" fg:x="3300" fg:w="6"/><text x="89.8996%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.16%)</title><rect x="89.6496%" y="325" width="0.1630%" height="15" fill="rgb(227,98,0)" fg:x="3300" fg:w="6"/><text x="89.8996%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="89.7854%" y="309" width="0.0272%" height="15" fill="rgb(207,7,3)" fg:x="3305" fg:w="1"/><text x="90.0354%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;chess::v2::Node&gt;&gt; (1 samples, 0.03%)</title><rect x="89.8126%" y="373" width="0.0272%" height="15" fill="rgb(206,98,19)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.03%)</title><rect x="89.8126%" y="357" width="0.0272%" height="15" fill="rgb(217,5,26)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="367.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="89.8126%" y="341" width="0.0272%" height="15" fill="rgb(235,190,38)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="89.8126%" y="325" width="0.0272%" height="15" fill="rgb(247,86,24)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="89.8126%" y="309" width="0.0272%" height="15" fill="rgb(205,101,16)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="89.8126%" y="293" width="0.0272%" height="15" fill="rgb(246,168,33)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="303.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="89.8126%" y="277" width="0.0272%" height="15" fill="rgb(231,114,1)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.03%)</title><rect x="89.8126%" y="261" width="0.0272%" height="15" fill="rgb(207,184,53)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="89.8126%" y="245" width="0.0272%" height="15" fill="rgb(224,95,51)" fg:x="3306" fg:w="1"/><text x="90.0626%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.11%)</title><rect x="89.9212%" y="261" width="0.1087%" height="15" fill="rgb(212,188,45)" fg:x="3310" fg:w="4"/><text x="90.1712%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="89.9756%" y="245" width="0.0543%" height="15" fill="rgb(223,154,38)" fg:x="3312" fg:w="2"/><text x="90.2256%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="90.0570%" y="245" width="0.0272%" height="15" fill="rgb(251,22,52)" fg:x="3315" fg:w="1"/><text x="90.3070%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.27%)</title><rect x="89.8669%" y="309" width="0.2717%" height="15" fill="rgb(229,209,22)" fg:x="3308" fg:w="10"/><text x="90.1169%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.27%)</title><rect x="89.8669%" y="293" width="0.2717%" height="15" fill="rgb(234,138,34)" fg:x="3308" fg:w="10"/><text x="90.1169%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.27%)</title><rect x="89.8669%" y="277" width="0.2717%" height="15" fill="rgb(212,95,11)" fg:x="3308" fg:w="10"/><text x="90.1169%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.11%)</title><rect x="90.0299%" y="261" width="0.1087%" height="15" fill="rgb(240,179,47)" fg:x="3314" fg:w="4"/><text x="90.2799%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect x="90.0842%" y="245" width="0.0543%" height="15" fill="rgb(240,163,11)" fg:x="3316" fg:w="2"/><text x="90.3342%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.14%)</title><rect x="90.1385%" y="309" width="0.1358%" height="15" fill="rgb(236,37,12)" fg:x="3318" fg:w="5"/><text x="90.3885%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.05%)</title><rect x="90.2200%" y="293" width="0.0543%" height="15" fill="rgb(232,164,16)" fg:x="3321" fg:w="2"/><text x="90.4700%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.05%)</title><rect x="90.2200%" y="277" width="0.0543%" height="15" fill="rgb(244,205,15)" fg:x="3321" fg:w="2"/><text x="90.4700%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.05%)</title><rect x="90.2200%" y="261" width="0.0543%" height="15" fill="rgb(223,117,47)" fg:x="3321" fg:w="2"/><text x="90.4700%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.49%)</title><rect x="89.8669%" y="325" width="0.4890%" height="15" fill="rgb(244,107,35)" fg:x="3308" fg:w="18"/><text x="90.1169%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.08%)</title><rect x="90.2744%" y="309" width="0.0815%" height="15" fill="rgb(205,140,8)" fg:x="3323" fg:w="3"/><text x="90.5244%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.05%)</title><rect x="90.3015%" y="293" width="0.0543%" height="15" fill="rgb(228,84,46)" fg:x="3324" fg:w="2"/><text x="90.5515%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="90.3015%" y="277" width="0.0543%" height="15" fill="rgb(254,188,9)" fg:x="3324" fg:w="2"/><text x="90.5515%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="90.3015%" y="261" width="0.0543%" height="15" fill="rgb(206,112,54)" fg:x="3324" fg:w="2"/><text x="90.5515%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="90.3015%" y="245" width="0.0543%" height="15" fill="rgb(216,84,49)" fg:x="3324" fg:w="2"/><text x="90.5515%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="90.5732%" y="309" width="0.0815%" height="15" fill="rgb(214,194,35)" fg:x="3334" fg:w="3"/><text x="90.8232%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="90.6275%" y="293" width="0.0272%" height="15" fill="rgb(249,28,3)" fg:x="3336" fg:w="1"/><text x="90.8775%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="90.6275%" y="277" width="0.0272%" height="15" fill="rgb(222,56,52)" fg:x="3336" fg:w="1"/><text x="90.8775%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (45 samples, 1.22%)</title><rect x="90.6547%" y="309" width="1.2225%" height="15" fill="rgb(245,217,50)" fg:x="3337" fg:w="45"/><text x="90.9047%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (45 samples, 1.22%)</title><rect x="90.6547%" y="293" width="1.2225%" height="15" fill="rgb(213,201,24)" fg:x="3337" fg:w="45"/><text x="90.9047%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (1 samples, 0.03%)</title><rect x="91.8772%" y="277" width="0.0272%" height="15" fill="rgb(248,116,28)" fg:x="3382" fg:w="1"/><text x="92.1272%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (58 samples, 1.58%)</title><rect x="91.9044%" y="277" width="1.5757%" height="15" fill="rgb(219,72,43)" fg:x="3383" fg:w="58"/><text x="92.1544%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (58 samples, 1.58%)</title><rect x="91.9044%" y="261" width="1.5757%" height="15" fill="rgb(209,138,14)" fg:x="3383" fg:w="58"/><text x="92.1544%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 1.58%)</title><rect x="91.9044%" y="245" width="1.5757%" height="15" fill="rgb(222,18,33)" fg:x="3383" fg:w="58"/><text x="92.1544%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (135 samples, 3.67%)</title><rect x="89.8397%" y="373" width="3.6675%" height="15" fill="rgb(213,199,7)" fg:x="3307" fg:w="135"/><text x="90.0897%" y="383.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (135 samples, 3.67%)</title><rect x="89.8397%" y="357" width="3.6675%" height="15" fill="rgb(250,110,10)" fg:x="3307" fg:w="135"/><text x="90.0897%" y="367.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (135 samples, 3.67%)</title><rect x="89.8397%" y="341" width="3.6675%" height="15" fill="rgb(248,123,6)" fg:x="3307" fg:w="135"/><text x="90.0897%" y="351.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (116 samples, 3.15%)</title><rect x="90.3559%" y="325" width="3.1513%" height="15" fill="rgb(206,91,31)" fg:x="3326" fg:w="116"/><text x="90.6059%" y="335.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (60 samples, 1.63%)</title><rect x="91.8772%" y="309" width="1.6300%" height="15" fill="rgb(211,154,13)" fg:x="3382" fg:w="60"/><text x="92.1272%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (60 samples, 1.63%)</title><rect x="91.8772%" y="293" width="1.6300%" height="15" fill="rgb(225,148,7)" fg:x="3382" fg:w="60"/><text x="92.1272%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="93.4800%" y="277" width="0.0272%" height="15" fill="rgb(220,160,43)" fg:x="3441" fg:w="1"/><text x="93.7300%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.03%)</title><rect x="93.4800%" y="261" width="0.0272%" height="15" fill="rgb(213,52,39)" fg:x="3441" fg:w="1"/><text x="93.7300%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.03%)</title><rect x="93.4800%" y="245" width="0.0272%" height="15" fill="rgb(243,137,7)" fg:x="3441" fg:w="1"/><text x="93.7300%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.03%)</title><rect x="93.4800%" y="229" width="0.0272%" height="15" fill="rgb(230,79,13)" fg:x="3441" fg:w="1"/><text x="93.7300%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="93.5344%" y="261" width="0.0543%" height="15" fill="rgb(247,105,23)" fg:x="3443" fg:w="2"/><text x="93.7844%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="93.5072%" y="325" width="0.1087%" height="15" fill="rgb(223,179,41)" fg:x="3442" fg:w="4"/><text x="93.7572%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="93.5072%" y="309" width="0.1087%" height="15" fill="rgb(218,9,34)" fg:x="3442" fg:w="4"/><text x="93.7572%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="93.5072%" y="293" width="0.1087%" height="15" fill="rgb(222,106,8)" fg:x="3442" fg:w="4"/><text x="93.7572%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.11%)</title><rect x="93.5072%" y="277" width="0.1087%" height="15" fill="rgb(211,220,0)" fg:x="3442" fg:w="4"/><text x="93.7572%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="93.5887%" y="261" width="0.0272%" height="15" fill="rgb(229,52,16)" fg:x="3445" fg:w="1"/><text x="93.8387%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="93.6159%" y="325" width="0.0272%" height="15" fill="rgb(212,155,18)" fg:x="3446" fg:w="1"/><text x="93.8659%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.16%)</title><rect x="93.5072%" y="341" width="0.1630%" height="15" fill="rgb(242,21,14)" fg:x="3442" fg:w="6"/><text x="93.7572%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.03%)</title><rect x="93.6430%" y="325" width="0.0272%" height="15" fill="rgb(222,19,48)" fg:x="3447" fg:w="1"/><text x="93.8930%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="93.6430%" y="309" width="0.0272%" height="15" fill="rgb(232,45,27)" fg:x="3447" fg:w="1"/><text x="93.8930%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="93.6430%" y="293" width="0.0272%" height="15" fill="rgb(249,103,42)" fg:x="3447" fg:w="1"/><text x="93.8930%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="93.6430%" y="277" width="0.0272%" height="15" fill="rgb(246,81,33)" fg:x="3447" fg:w="1"/><text x="93.8930%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="93.6430%" y="261" width="0.0272%" height="15" fill="rgb(252,33,42)" fg:x="3447" fg:w="1"/><text x="93.8930%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.05%)</title><rect x="93.6702%" y="341" width="0.0543%" height="15" fill="rgb(209,212,41)" fg:x="3448" fg:w="2"/><text x="93.9202%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.03%)</title><rect x="93.6974%" y="325" width="0.0272%" height="15" fill="rgb(207,154,6)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="93.6974%" y="309" width="0.0272%" height="15" fill="rgb(223,64,47)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="93.6974%" y="293" width="0.0272%" height="15" fill="rgb(211,161,38)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.03%)</title><rect x="93.6974%" y="277" width="0.0272%" height="15" fill="rgb(219,138,40)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.03%)</title><rect x="93.6974%" y="261" width="0.0272%" height="15" fill="rgb(241,228,46)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="271.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.03%)</title><rect x="93.6974%" y="245" width="0.0272%" height="15" fill="rgb(223,209,38)" fg:x="3449" fg:w="1"/><text x="93.9474%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7 samples, 0.19%)</title><rect x="93.7789%" y="325" width="0.1902%" height="15" fill="rgb(236,164,45)" fg:x="3452" fg:w="7"/><text x="94.0289%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7 samples, 0.19%)</title><rect x="93.7789%" y="309" width="0.1902%" height="15" fill="rgb(231,15,5)" fg:x="3452" fg:w="7"/><text x="94.0289%" y="319.50"></text></g><g><title>core::ptr::write (7 samples, 0.19%)</title><rect x="93.7789%" y="293" width="0.1902%" height="15" fill="rgb(252,35,15)" fg:x="3452" fg:w="7"/><text x="94.0289%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (2 samples, 0.05%)</title><rect x="93.9690%" y="325" width="0.0543%" height="15" fill="rgb(248,181,18)" fg:x="3459" fg:w="2"/><text x="94.2190%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="94.0505%" y="181" width="0.0272%" height="15" fill="rgb(233,39,42)" fg:x="3462" fg:w="1"/><text x="94.3005%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.08%)</title><rect x="94.0234%" y="245" width="0.0815%" height="15" fill="rgb(238,110,33)" fg:x="3461" fg:w="3"/><text x="94.2734%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.08%)</title><rect x="94.0234%" y="229" width="0.0815%" height="15" fill="rgb(233,195,10)" fg:x="3461" fg:w="3"/><text x="94.2734%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.08%)</title><rect x="94.0234%" y="213" width="0.0815%" height="15" fill="rgb(254,105,3)" fg:x="3461" fg:w="3"/><text x="94.2734%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.05%)</title><rect x="94.0505%" y="197" width="0.0543%" height="15" fill="rgb(221,225,9)" fg:x="3462" fg:w="2"/><text x="94.3005%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="94.0777%" y="181" width="0.0272%" height="15" fill="rgb(224,227,45)" fg:x="3463" fg:w="1"/><text x="94.3277%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.08%)</title><rect x="94.1864%" y="165" width="0.0815%" height="15" fill="rgb(229,198,43)" fg:x="3467" fg:w="3"/><text x="94.4364%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect x="94.2135%" y="149" width="0.0543%" height="15" fill="rgb(206,209,35)" fg:x="3468" fg:w="2"/><text x="94.4635%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (13 samples, 0.35%)</title><rect x="94.0234%" y="277" width="0.3532%" height="15" fill="rgb(245,195,53)" fg:x="3461" fg:w="13"/><text x="94.2734%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.35%)</title><rect x="94.0234%" y="261" width="0.3532%" height="15" fill="rgb(240,92,26)" fg:x="3461" fg:w="13"/><text x="94.2734%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.27%)</title><rect x="94.1049%" y="245" width="0.2717%" height="15" fill="rgb(207,40,23)" fg:x="3464" fg:w="10"/><text x="94.3549%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.27%)</title><rect x="94.1049%" y="229" width="0.2717%" height="15" fill="rgb(223,111,35)" fg:x="3464" fg:w="10"/><text x="94.3549%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.24%)</title><rect x="94.1320%" y="213" width="0.2445%" height="15" fill="rgb(229,147,28)" fg:x="3465" fg:w="9"/><text x="94.3820%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.24%)</title><rect x="94.1320%" y="197" width="0.2445%" height="15" fill="rgb(211,29,28)" fg:x="3465" fg:w="9"/><text x="94.3820%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.24%)</title><rect x="94.1320%" y="181" width="0.2445%" height="15" fill="rgb(228,72,33)" fg:x="3465" fg:w="9"/><text x="94.3820%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.11%)</title><rect x="94.2679%" y="165" width="0.1087%" height="15" fill="rgb(205,214,31)" fg:x="3470" fg:w="4"/><text x="94.5179%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="94.3765%" y="277" width="0.0272%" height="15" fill="rgb(224,111,15)" fg:x="3474" fg:w="1"/><text x="94.6265%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="94.3765%" y="261" width="0.0272%" height="15" fill="rgb(253,21,26)" fg:x="3474" fg:w="1"/><text x="94.6265%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="94.3765%" y="245" width="0.0272%" height="15" fill="rgb(245,139,43)" fg:x="3474" fg:w="1"/><text x="94.6265%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="94.3765%" y="229" width="0.0272%" height="15" fill="rgb(252,170,7)" fg:x="3474" fg:w="1"/><text x="94.6265%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (2 samples, 0.05%)</title><rect x="94.4037%" y="277" width="0.0543%" height="15" fill="rgb(231,118,14)" fg:x="3475" fg:w="2"/><text x="94.6537%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (2 samples, 0.05%)</title><rect x="94.4037%" y="261" width="0.0543%" height="15" fill="rgb(238,83,0)" fg:x="3475" fg:w="2"/><text x="94.6537%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="94.4037%" y="245" width="0.0543%" height="15" fill="rgb(221,39,39)" fg:x="3475" fg:w="2"/><text x="94.6537%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.03%)</title><rect x="94.4309%" y="229" width="0.0272%" height="15" fill="rgb(222,119,46)" fg:x="3476" fg:w="1"/><text x="94.6809%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="94.4852%" y="261" width="0.0272%" height="15" fill="rgb(222,165,49)" fg:x="3478" fg:w="1"/><text x="94.7352%" y="271.50"></text></g><g><title>chess::v2::Manager::grow (597 samples, 16.22%)</title><rect x="78.3483%" y="389" width="16.2184%" height="15" fill="rgb(219,113,52)" fg:x="2884" fg:w="597"/><text x="78.5983%" y="399.50">chess::v2::Manager::grow</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 1.06%)</title><rect x="93.5072%" y="373" width="1.0595%" height="15" fill="rgb(214,7,15)" fg:x="3442" fg:w="39"/><text x="93.7572%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 1.06%)</title><rect x="93.5072%" y="357" width="1.0595%" height="15" fill="rgb(235,32,4)" fg:x="3442" fg:w="39"/><text x="93.7572%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (31 samples, 0.84%)</title><rect x="93.7245%" y="341" width="0.8422%" height="15" fill="rgb(238,90,54)" fg:x="3450" fg:w="31"/><text x="93.9745%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (20 samples, 0.54%)</title><rect x="94.0234%" y="325" width="0.5433%" height="15" fill="rgb(213,208,19)" fg:x="3461" fg:w="20"/><text x="94.2734%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (20 samples, 0.54%)</title><rect x="94.0234%" y="309" width="0.5433%" height="15" fill="rgb(233,156,4)" fg:x="3461" fg:w="20"/><text x="94.2734%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (20 samples, 0.54%)</title><rect x="94.0234%" y="293" width="0.5433%" height="15" fill="rgb(207,194,5)" fg:x="3461" fg:w="20"/><text x="94.2734%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (4 samples, 0.11%)</title><rect x="94.4580%" y="277" width="0.1087%" height="15" fill="rgb(206,111,30)" fg:x="3477" fg:w="4"/><text x="94.7080%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.05%)</title><rect x="94.5124%" y="261" width="0.0543%" height="15" fill="rgb(243,70,54)" fg:x="3479" fg:w="2"/><text x="94.7624%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.03%)</title><rect x="94.5667%" y="389" width="0.0272%" height="15" fill="rgb(242,28,8)" fg:x="3481" fg:w="1"/><text x="94.8167%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.03%)</title><rect x="94.5667%" y="373" width="0.0272%" height="15" fill="rgb(219,106,18)" fg:x="3481" fg:w="1"/><text x="94.8167%" y="383.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.03%)</title><rect x="94.5667%" y="357" width="0.0272%" height="15" fill="rgb(244,222,10)" fg:x="3481" fg:w="1"/><text x="94.8167%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="94.5939%" y="389" width="0.0272%" height="15" fill="rgb(236,179,52)" fg:x="3482" fg:w="1"/><text x="94.8439%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="94.5939%" y="373" width="0.0272%" height="15" fill="rgb(213,23,39)" fg:x="3482" fg:w="1"/><text x="94.8439%" y="383.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="94.5939%" y="357" width="0.0272%" height="15" fill="rgb(238,48,10)" fg:x="3482" fg:w="1"/><text x="94.8439%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.27%)</title><rect x="95.0014%" y="229" width="0.2717%" height="15" fill="rgb(251,196,23)" fg:x="3497" fg:w="10"/><text x="95.2514%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.08%)</title><rect x="95.3002%" y="165" width="0.0815%" height="15" fill="rgb(250,152,24)" fg:x="3508" fg:w="3"/><text x="95.5502%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect x="95.3274%" y="149" width="0.0543%" height="15" fill="rgb(209,150,17)" fg:x="3509" fg:w="2"/><text x="95.5774%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.19%)</title><rect x="95.2730%" y="213" width="0.1902%" height="15" fill="rgb(234,202,34)" fg:x="3507" fg:w="7"/><text x="95.5230%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.19%)</title><rect x="95.2730%" y="197" width="0.1902%" height="15" fill="rgb(253,148,53)" fg:x="3507" fg:w="7"/><text x="95.5230%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.19%)</title><rect x="95.2730%" y="181" width="0.1902%" height="15" fill="rgb(218,129,16)" fg:x="3507" fg:w="7"/><text x="95.5230%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.08%)</title><rect x="95.3817%" y="165" width="0.0815%" height="15" fill="rgb(216,85,19)" fg:x="3511" fg:w="3"/><text x="95.6317%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.08%)</title><rect x="95.3817%" y="149" width="0.0815%" height="15" fill="rgb(235,228,7)" fg:x="3511" fg:w="3"/><text x="95.6317%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="95.4632%" y="213" width="0.1087%" height="15" fill="rgb(245,175,0)" fg:x="3514" fg:w="4"/><text x="95.7132%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="95.4632%" y="197" width="0.1087%" height="15" fill="rgb(208,168,36)" fg:x="3514" fg:w="4"/><text x="95.7132%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="95.4632%" y="181" width="0.1087%" height="15" fill="rgb(246,171,24)" fg:x="3514" fg:w="4"/><text x="95.7132%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.05%)</title><rect x="95.5175%" y="165" width="0.0543%" height="15" fill="rgb(215,142,24)" fg:x="3516" fg:w="2"/><text x="95.7675%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="95.5175%" y="149" width="0.0543%" height="15" fill="rgb(250,187,7)" fg:x="3516" fg:w="2"/><text x="95.7675%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="96.0880%" y="53" width="0.0543%" height="15" fill="rgb(228,66,33)" fg:x="3537" fg:w="2"/><text x="96.3380%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.38%)</title><rect x="95.9522%" y="69" width="0.3803%" height="15" fill="rgb(234,215,21)" fg:x="3532" fg:w="14"/><text x="96.2022%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.19%)</title><rect x="96.1424%" y="53" width="0.1902%" height="15" fill="rgb(222,191,20)" fg:x="3539" fg:w="7"/><text x="96.3924%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.14%)</title><rect x="96.3325%" y="69" width="0.1358%" height="15" fill="rgb(245,79,54)" fg:x="3546" fg:w="5"/><text x="96.5825%" y="79.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (34 samples, 0.92%)</title><rect x="95.5719%" y="133" width="0.9237%" height="15" fill="rgb(240,10,37)" fg:x="3518" fg:w="34"/><text x="95.8219%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (34 samples, 0.92%)</title><rect x="95.5719%" y="117" width="0.9237%" height="15" fill="rgb(214,192,32)" fg:x="3518" fg:w="34"/><text x="95.8219%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (34 samples, 0.92%)</title><rect x="95.5719%" y="101" width="0.9237%" height="15" fill="rgb(209,36,54)" fg:x="3518" fg:w="34"/><text x="95.8219%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.92%)</title><rect x="95.5719%" y="85" width="0.9237%" height="15" fill="rgb(220,10,11)" fg:x="3518" fg:w="34"/><text x="95.8219%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="96.4684%" y="69" width="0.0272%" height="15" fill="rgb(221,106,17)" fg:x="3551" fg:w="1"/><text x="96.7184%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="96.9573%" y="37" width="0.0272%" height="15" fill="rgb(251,142,44)" fg:x="3569" fg:w="1"/><text x="97.2073%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.33%)</title><rect x="96.7943%" y="53" width="0.3260%" height="15" fill="rgb(238,13,15)" fg:x="3563" fg:w="12"/><text x="97.0443%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.14%)</title><rect x="96.9845%" y="37" width="0.1358%" height="15" fill="rgb(208,107,27)" fg:x="3570" fg:w="5"/><text x="97.2345%" y="47.50"></text></g><g><title>core::hash::Hash::hash_slice (63 samples, 1.71%)</title><rect x="95.5719%" y="181" width="1.7115%" height="15" fill="rgb(205,136,37)" fg:x="3518" fg:w="63"/><text x="95.8219%" y="191.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (63 samples, 1.71%)</title><rect x="95.5719%" y="165" width="1.7115%" height="15" fill="rgb(250,205,27)" fg:x="3518" fg:w="63"/><text x="95.8219%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (63 samples, 1.71%)</title><rect x="95.5719%" y="149" width="1.7115%" height="15" fill="rgb(210,80,43)" fg:x="3518" fg:w="63"/><text x="95.8219%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (29 samples, 0.79%)</title><rect x="96.4955%" y="133" width="0.7878%" height="15" fill="rgb(247,160,36)" fg:x="3552" fg:w="29"/><text x="96.7455%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (29 samples, 0.79%)</title><rect x="96.4955%" y="117" width="0.7878%" height="15" fill="rgb(234,13,49)" fg:x="3552" fg:w="29"/><text x="96.7455%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 0.73%)</title><rect x="96.5499%" y="101" width="0.7335%" height="15" fill="rgb(234,122,0)" fg:x="3554" fg:w="27"/><text x="96.7999%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (27 samples, 0.73%)</title><rect x="96.5499%" y="85" width="0.7335%" height="15" fill="rgb(207,146,38)" fg:x="3554" fg:w="27"/><text x="96.7999%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 0.73%)</title><rect x="96.5499%" y="69" width="0.7335%" height="15" fill="rgb(207,177,25)" fg:x="3554" fg:w="27"/><text x="96.7999%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.16%)</title><rect x="97.1203%" y="53" width="0.1630%" height="15" fill="rgb(211,178,42)" fg:x="3575" fg:w="6"/><text x="97.3703%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.08%)</title><rect x="97.2833%" y="101" width="0.0815%" height="15" fill="rgb(230,69,54)" fg:x="3581" fg:w="3"/><text x="97.5333%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.05%)</title><rect x="97.3105%" y="85" width="0.0543%" height="15" fill="rgb(214,135,41)" fg:x="3582" fg:w="2"/><text x="97.5605%" y="95.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (67 samples, 1.82%)</title><rect x="95.5719%" y="213" width="1.8202%" height="15" fill="rgb(237,67,25)" fg:x="3518" fg:w="67"/><text x="95.8219%" y="223.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (67 samples, 1.82%)</title><rect x="95.5719%" y="197" width="1.8202%" height="15" fill="rgb(222,189,50)" fg:x="3518" fg:w="67"/><text x="95.8219%" y="207.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.11%)</title><rect x="97.2833%" y="181" width="0.1087%" height="15" fill="rgb(245,148,34)" fg:x="3581" fg:w="4"/><text x="97.5333%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.11%)</title><rect x="97.2833%" y="165" width="0.1087%" height="15" fill="rgb(222,29,6)" fg:x="3581" fg:w="4"/><text x="97.5333%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="97.2833%" y="149" width="0.1087%" height="15" fill="rgb(221,189,43)" fg:x="3581" fg:w="4"/><text x="97.5333%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="97.2833%" y="133" width="0.1087%" height="15" fill="rgb(207,36,27)" fg:x="3581" fg:w="4"/><text x="97.5333%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.11%)</title><rect x="97.2833%" y="117" width="0.1087%" height="15" fill="rgb(217,90,24)" fg:x="3581" fg:w="4"/><text x="97.5333%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.03%)</title><rect x="97.3648%" y="101" width="0.0272%" height="15" fill="rgb(224,66,35)" fg:x="3584" fg:w="1"/><text x="97.6148%" y="111.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="97.6365%" y="133" width="0.0272%" height="15" fill="rgb(221,13,50)" fg:x="3594" fg:w="1"/><text x="97.8865%" y="143.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="97.6365%" y="117" width="0.0272%" height="15" fill="rgb(236,68,49)" fg:x="3594" fg:w="1"/><text x="97.8865%" y="127.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="97.6365%" y="101" width="0.0272%" height="15" fill="rgb(229,146,28)" fg:x="3594" fg:w="1"/><text x="97.8865%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (19 samples, 0.52%)</title><rect x="97.3920%" y="213" width="0.5162%" height="15" fill="rgb(225,31,38)" fg:x="3585" fg:w="19"/><text x="97.6420%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (19 samples, 0.52%)</title><rect x="97.3920%" y="197" width="0.5162%" height="15" fill="rgb(250,208,3)" fg:x="3585" fg:w="19"/><text x="97.6420%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.46%)</title><rect x="97.4463%" y="181" width="0.4618%" height="15" fill="rgb(246,54,23)" fg:x="3587" fg:w="17"/><text x="97.6963%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.46%)</title><rect x="97.4463%" y="165" width="0.4618%" height="15" fill="rgb(243,76,11)" fg:x="3587" fg:w="17"/><text x="97.6963%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.46%)</title><rect x="97.4463%" y="149" width="0.4618%" height="15" fill="rgb(245,21,50)" fg:x="3587" fg:w="17"/><text x="97.6963%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (9 samples, 0.24%)</title><rect x="97.6637%" y="133" width="0.2445%" height="15" fill="rgb(228,9,43)" fg:x="3595" fg:w="9"/><text x="97.9137%" y="143.50"></text></g><g><title>chess::board::Board::id (100 samples, 2.72%)</title><rect x="95.2730%" y="229" width="2.7167%" height="15" fill="rgb(208,100,47)" fg:x="3507" fg:w="100"/><text x="95.5230%" y="239.50">ch..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (3 samples, 0.08%)</title><rect x="97.9082%" y="213" width="0.0815%" height="15" fill="rgb(232,26,8)" fg:x="3604" fg:w="3"/><text x="98.1582%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (3 samples, 0.08%)</title><rect x="97.9082%" y="197" width="0.0815%" height="15" fill="rgb(216,166,38)" fg:x="3604" fg:w="3"/><text x="98.1582%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="97.9353%" y="181" width="0.0543%" height="15" fill="rgb(251,202,51)" fg:x="3605" fg:w="2"/><text x="98.1853%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="97.9353%" y="165" width="0.0543%" height="15" fill="rgb(254,216,34)" fg:x="3605" fg:w="2"/><text x="98.1853%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="97.9353%" y="149" width="0.0543%" height="15" fill="rgb(251,32,27)" fg:x="3605" fg:w="2"/><text x="98.1853%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.03%)</title><rect x="97.9625%" y="133" width="0.0272%" height="15" fill="rgb(208,127,28)" fg:x="3606" fg:w="1"/><text x="98.2125%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (26 samples, 0.71%)</title><rect x="97.9897%" y="229" width="0.7063%" height="15" fill="rgb(224,137,22)" fg:x="3607" fg:w="26"/><text x="98.2397%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (26 samples, 0.71%)</title><rect x="97.9897%" y="213" width="0.7063%" height="15" fill="rgb(254,70,32)" fg:x="3607" fg:w="26"/><text x="98.2397%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (26 samples, 0.71%)</title><rect x="97.9897%" y="197" width="0.7063%" height="15" fill="rgb(229,75,37)" fg:x="3607" fg:w="26"/><text x="98.2397%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="98.6688%" y="181" width="0.0272%" height="15" fill="rgb(252,64,23)" fg:x="3632" fg:w="1"/><text x="98.9188%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (12 samples, 0.33%)</title><rect x="98.6960%" y="229" width="0.3260%" height="15" fill="rgb(232,162,48)" fg:x="3633" fg:w="12"/><text x="98.9460%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (11 samples, 0.30%)</title><rect x="98.7232%" y="213" width="0.2988%" height="15" fill="rgb(246,160,12)" fg:x="3634" fg:w="11"/><text x="98.9732%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="99.2122%" y="181" width="0.0543%" height="15" fill="rgb(247,166,0)" fg:x="3652" fg:w="2"/><text x="99.4622%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.05%)</title><rect x="99.2122%" y="165" width="0.0543%" height="15" fill="rgb(249,219,21)" fg:x="3652" fg:w="2"/><text x="99.4622%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="99.2665%" y="181" width="0.0272%" height="15" fill="rgb(205,209,3)" fg:x="3654" fg:w="1"/><text x="99.5165%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="99.2665%" y="165" width="0.0272%" height="15" fill="rgb(243,44,1)" fg:x="3654" fg:w="1"/><text x="99.5165%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="99.2665%" y="149" width="0.0272%" height="15" fill="rgb(206,159,16)" fg:x="3654" fg:w="1"/><text x="99.5165%" y="159.50"></text></g><g><title>chess::board::Board::is_whites_move (1 samples, 0.03%)</title><rect x="99.2937%" y="165" width="0.0272%" height="15" fill="rgb(244,77,30)" fg:x="3655" fg:w="1"/><text x="99.5437%" y="175.50"></text></g><g><title>chess::v2::Node::update_score (3 samples, 0.08%)</title><rect x="99.2937%" y="181" width="0.0815%" height="15" fill="rgb(218,69,12)" fg:x="3655" fg:w="3"/><text x="99.5437%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.05%)</title><rect x="99.3208%" y="165" width="0.0543%" height="15" fill="rgb(212,87,7)" fg:x="3656" fg:w="2"/><text x="99.5708%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.05%)</title><rect x="99.3208%" y="149" width="0.0543%" height="15" fill="rgb(245,114,25)" fg:x="3656" fg:w="2"/><text x="99.5708%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (8 samples, 0.22%)</title><rect x="99.3752%" y="181" width="0.2173%" height="15" fill="rgb(210,61,42)" fg:x="3658" fg:w="8"/><text x="99.6252%" y="191.50"></text></g><g><title>core::cell::BorrowRef::new (8 samples, 0.22%)</title><rect x="99.3752%" y="165" width="0.2173%" height="15" fill="rgb(211,52,33)" fg:x="3658" fg:w="8"/><text x="99.6252%" y="175.50"></text></g><g><title>chess::v2::Manager::work::_{{closure}} (188 samples, 5.11%)</title><rect x="94.6210%" y="245" width="5.1073%" height="15" fill="rgb(234,58,33)" fg:x="3483" fg:w="188"/><text x="94.8710%" y="255.50">chess:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (26 samples, 0.71%)</title><rect x="99.0220%" y="229" width="0.7063%" height="15" fill="rgb(220,115,36)" fg:x="3645" fg:w="26"/><text x="99.2720%" y="239.50"></text></g><g><title>chess::v2::Manager::work::_{{closure}}::_{{closure}} (26 samples, 0.71%)</title><rect x="99.0220%" y="213" width="0.7063%" height="15" fill="rgb(243,153,54)" fg:x="3645" fg:w="26"/><text x="99.2720%" y="223.50"></text></g><g><title>chess::v2::Node::update_score (24 samples, 0.65%)</title><rect x="99.0763%" y="197" width="0.6520%" height="15" fill="rgb(251,47,18)" fg:x="3647" fg:w="24"/><text x="99.3263%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.14%)</title><rect x="99.5925%" y="181" width="0.1358%" height="15" fill="rgb(242,102,42)" fg:x="3666" fg:w="5"/><text x="99.8425%" y="191.50"></text></g><g><title>chess::v2::Node::update_score::_{{closure}} (5 samples, 0.14%)</title><rect x="99.5925%" y="165" width="0.1358%" height="15" fill="rgb(234,31,38)" fg:x="3666" fg:w="5"/><text x="99.8425%" y="175.50"></text></g><g><title>&lt;chess::board::ChessMove as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="99.7012%" y="149" width="0.0272%" height="15" fill="rgb(221,117,51)" fg:x="3670" fg:w="1"/><text x="99.9512%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (189 samples, 5.13%)</title><rect x="94.6210%" y="325" width="5.1345%" height="15" fill="rgb(212,20,18)" fg:x="3483" fg:w="189"/><text x="94.8710%" y="335.50">&lt;alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (189 samples, 5.13%)</title><rect x="94.6210%" y="309" width="5.1345%" height="15" fill="rgb(245,133,36)" fg:x="3483" fg:w="189"/><text x="94.8710%" y="319.50">core::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (189 samples, 5.13%)</title><rect x="94.6210%" y="293" width="5.1345%" height="15" fill="rgb(212,6,19)" fg:x="3483" fg:w="189"/><text x="94.8710%" y="303.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (189 samples, 5.13%)</title><rect x="94.6210%" y="277" width="5.1345%" height="15" fill="rgb(218,1,36)" fg:x="3483" fg:w="189"/><text x="94.8710%" y="287.50">core::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (189 samples, 5.13%)</title><rect x="94.6210%" y="261" width="5.1345%" height="15" fill="rgb(246,84,54)" fg:x="3483" fg:w="189"/><text x="94.8710%" y="271.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.03%)</title><rect x="99.7283%" y="245" width="0.0272%" height="15" fill="rgb(242,110,6)" fg:x="3671" fg:w="1"/><text x="99.9783%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::_{{closure}} (1 samples, 0.03%)</title><rect x="99.7283%" y="229" width="0.0272%" height="15" fill="rgb(214,47,5)" fg:x="3671" fg:w="1"/><text x="99.9783%" y="239.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (1 samples, 0.03%)</title><rect x="99.7283%" y="213" width="0.0272%" height="15" fill="rgb(218,159,25)" fg:x="3671" fg:w="1"/><text x="99.9783%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (190 samples, 5.16%)</title><rect x="94.6210%" y="389" width="5.1616%" height="15" fill="rgb(215,211,28)" fg:x="3483" fg:w="190"/><text x="94.8710%" y="399.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (190 samples, 5.16%)</title><rect x="94.6210%" y="373" width="5.1616%" height="15" fill="rgb(238,59,32)" fg:x="3483" fg:w="190"/><text x="94.8710%" y="383.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (190 samples, 5.16%)</title><rect x="94.6210%" y="357" width="5.1616%" height="15" fill="rgb(226,82,3)" fg:x="3483" fg:w="190"/><text x="94.8710%" y="367.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (190 samples, 5.16%)</title><rect x="94.6210%" y="341" width="5.1616%" height="15" fill="rgb(240,164,32)" fg:x="3483" fg:w="190"/><text x="94.8710%" y="351.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="99.7555%" y="325" width="0.0272%" height="15" fill="rgb(232,46,7)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="99.7555%" y="309" width="0.0272%" height="15" fill="rgb(229,129,53)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="99.7555%" y="293" width="0.0272%" height="15" fill="rgb(234,188,29)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="99.7555%" y="277" width="0.0272%" height="15" fill="rgb(246,141,4)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="99.7555%" y="261" width="0.0272%" height="15" fill="rgb(229,23,39)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="99.7555%" y="245" width="0.0272%" height="15" fill="rgb(206,12,3)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="99.7555%" y="229" width="0.0272%" height="15" fill="rgb(252,226,20)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.7555%" y="213" width="0.0272%" height="15" fill="rgb(216,123,35)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="223.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="99.7555%" y="197" width="0.0272%" height="15" fill="rgb(212,68,40)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.03%)</title><rect x="99.7555%" y="181" width="0.0272%" height="15" fill="rgb(254,125,32)" fg:x="3672" fg:w="1"/><text x="100.0055%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;chess::v2::Node&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="99.7827%" y="389" width="0.0543%" height="15" fill="rgb(253,97,22)" fg:x="3673" fg:w="2"/><text x="100.0327%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.7827%" y="373" width="0.0543%" height="15" fill="rgb(241,101,14)" fg:x="3673" fg:w="2"/><text x="100.0327%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::rc::Rc&lt;core::cell::RefCell&lt;chess::v2::Node&gt;&gt;]&gt; (2 samples, 0.05%)</title><rect x="99.7827%" y="357" width="0.0543%" height="15" fill="rgb(238,103,29)" fg:x="3673" fg:w="2"/><text x="100.0327%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;chess::v2::Node&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="99.7827%" y="341" width="0.0543%" height="15" fill="rgb(233,195,47)" fg:x="3673" fg:w="2"/><text x="100.0327%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.7827%" y="325" width="0.0543%" height="15" fill="rgb(246,218,30)" fg:x="3673" fg:w="2"/><text x="100.0327%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (1 samples, 0.03%)</title><rect x="99.8098%" y="309" width="0.0272%" height="15" fill="rgb(219,145,47)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="99.8098%" y="293" width="0.0272%" height="15" fill="rgb(243,12,26)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="99.8098%" y="277" width="0.0272%" height="15" fill="rgb(214,87,16)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="287.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="99.8098%" y="261" width="0.0272%" height="15" fill="rgb(208,99,42)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="271.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="99.8098%" y="245" width="0.0272%" height="15" fill="rgb(253,99,2)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="255.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.03%)</title><rect x="99.8098%" y="229" width="0.0272%" height="15" fill="rgb(220,168,23)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.8098%" y="213" width="0.0272%" height="15" fill="rgb(242,38,24)" fg:x="3674" fg:w="1"/><text x="100.0598%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;chess::v2::Node&gt;&gt; (2 samples, 0.05%)</title><rect x="99.8370%" y="389" width="0.0543%" height="15" fill="rgb(225,182,9)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (2 samples, 0.05%)</title><rect x="99.8370%" y="373" width="0.0543%" height="15" fill="rgb(243,178,37)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="383.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.8370%" y="357" width="0.0543%" height="15" fill="rgb(232,139,19)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.05%)</title><rect x="99.8370%" y="341" width="0.0543%" height="15" fill="rgb(225,201,24)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.05%)</title><rect x="99.8370%" y="325" width="0.0543%" height="15" fill="rgb(221,47,46)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="335.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="99.8370%" y="309" width="0.0543%" height="15" fill="rgb(249,23,13)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="319.50"></text></g><g><title>core::mem::swap (2 samples, 0.05%)</title><rect x="99.8370%" y="293" width="0.0543%" height="15" fill="rgb(219,9,5)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.05%)</title><rect x="99.8370%" y="277" width="0.0543%" height="15" fill="rgb(254,171,16)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="99.8370%" y="261" width="0.0543%" height="15" fill="rgb(230,171,20)" fg:x="3675" fg:w="2"/><text x="100.0870%" y="271.50"></text></g><g><title>_start (3,575 samples, 97.12%)</title><rect x="2.8253%" y="709" width="97.1203%" height="15" fill="rgb(210,71,41)" fg:x="104" fg:w="3575"/><text x="3.0753%" y="719.50">_start</text></g><g><title>__libc_start_main (3,570 samples, 96.98%)</title><rect x="2.9612%" y="693" width="96.9845%" height="15" fill="rgb(206,173,20)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="703.50">__libc_start_main</text></g><g><title>main (3,570 samples, 96.98%)</title><rect x="2.9612%" y="677" width="96.9845%" height="15" fill="rgb(233,88,34)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (3,570 samples, 96.98%)</title><rect x="2.9612%" y="661" width="96.9845%" height="15" fill="rgb(223,209,46)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,570 samples, 96.98%)</title><rect x="2.9612%" y="645" width="96.9845%" height="15" fill="rgb(250,43,18)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,570 samples, 96.98%)</title><rect x="2.9612%" y="629" width="96.9845%" height="15" fill="rgb(208,13,10)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,570 samples, 96.98%)</title><rect x="2.9612%" y="613" width="96.9845%" height="15" fill="rgb(212,200,36)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,570 samples, 96.98%)</title><rect x="2.9612%" y="597" width="96.9845%" height="15" fill="rgb(225,90,30)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,570 samples, 96.98%)</title><rect x="2.9612%" y="581" width="96.9845%" height="15" fill="rgb(236,182,39)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="591.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,570 samples, 96.98%)</title><rect x="2.9612%" y="565" width="96.9845%" height="15" fill="rgb(212,144,35)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,570 samples, 96.98%)</title><rect x="2.9612%" y="549" width="96.9845%" height="15" fill="rgb(228,63,44)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>chess::main (3,570 samples, 96.98%)</title><rect x="2.9612%" y="533" width="96.9845%" height="15" fill="rgb(228,109,6)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="543.50">chess::main</text></g><g><title>chess::test (3,570 samples, 96.98%)</title><rect x="2.9612%" y="517" width="96.9845%" height="15" fill="rgb(238,117,24)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="527.50">chess::test</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3,570 samples, 96.98%)</title><rect x="2.9612%" y="501" width="96.9845%" height="15" fill="rgb(242,26,26)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="511.50">core::result::Result&lt;T,E&gt;::and_then</text></g><g><title>chess::test::_{{closure}} (3,570 samples, 96.98%)</title><rect x="2.9612%" y="485" width="96.9845%" height="15" fill="rgb(221,92,48)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="495.50">chess::test::_{{closure}}</text></g><g><title>chess::handle_command (3,570 samples, 96.98%)</title><rect x="2.9612%" y="469" width="96.9845%" height="15" fill="rgb(209,209,32)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="479.50">chess::handle_command</text></g><g><title>chess::handle_command_go (3,570 samples, 96.98%)</title><rect x="2.9612%" y="453" width="96.9845%" height="15" fill="rgb(221,70,22)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="463.50">chess::handle_command_go</text></g><g><title>chess::v2::find_best_move (3,570 samples, 96.98%)</title><rect x="2.9612%" y="437" width="96.9845%" height="15" fill="rgb(248,145,5)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="447.50">chess::v2::find_best_move</text></g><g><title>chess::v2::Manager::find_best_move (3,570 samples, 96.98%)</title><rect x="2.9612%" y="421" width="96.9845%" height="15" fill="rgb(226,116,26)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="431.50">chess::v2::Manager::find_best_move</text></g><g><title>chess::v2::Manager::work (3,570 samples, 96.98%)</title><rect x="2.9612%" y="405" width="96.9845%" height="15" fill="rgb(244,5,17)" fg:x="109" fg:w="3570"/><text x="3.2112%" y="415.50">chess::v2::Manager::work</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::collections::hash::map::HashMap&lt;u64,alloc::rc::Rc&lt;core::cell::RefCell&lt;chess::v2::Node&gt;&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="99.8913%" y="389" width="0.0543%" height="15" fill="rgb(252,159,33)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.05%)</title><rect x="99.8913%" y="373" width="0.0543%" height="15" fill="rgb(206,71,0)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="383.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.8913%" y="357" width="0.0543%" height="15" fill="rgb(233,118,54)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.05%)</title><rect x="99.8913%" y="341" width="0.0543%" height="15" fill="rgb(234,83,48)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.05%)</title><rect x="99.8913%" y="325" width="0.0543%" height="15" fill="rgb(228,3,54)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="335.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="99.8913%" y="309" width="0.0543%" height="15" fill="rgb(226,155,13)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="319.50"></text></g><g><title>core::mem::swap (2 samples, 0.05%)</title><rect x="99.8913%" y="293" width="0.0543%" height="15" fill="rgb(241,28,37)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.05%)</title><rect x="99.8913%" y="277" width="0.0543%" height="15" fill="rgb(233,93,10)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="99.8913%" y="261" width="0.0543%" height="15" fill="rgb(225,113,19)" fg:x="3677" fg:w="2"/><text x="100.1413%" y="271.50"></text></g><g><title>chess::board::Board::apply_move (1 samples, 0.03%)</title><rect x="99.9457%" y="709" width="0.0272%" height="15" fill="rgb(241,2,18)" fg:x="3679" fg:w="1"/><text x="100.1957%" y="719.50"></text></g><g><title>all (3,681 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(228,207,21)" fg:x="0" fg:w="3681"/><text x="0.2500%" y="751.50"></text></g><g><title>chess (3,681 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(213,211,35)" fg:x="0" fg:w="3681"/><text x="0.2500%" y="735.50">chess</text></g><g><title>chess::v2::find_best_move (1 samples, 0.03%)</title><rect x="99.9728%" y="709" width="0.0272%" height="15" fill="rgb(209,83,10)" fg:x="3680" fg:w="1"/><text x="100.2228%" y="719.50"></text></g><g><title>chess::v2::Manager::find_best_move (1 samples, 0.03%)</title><rect x="99.9728%" y="693" width="0.0272%" height="15" fill="rgb(209,164,1)" fg:x="3680" fg:w="1"/><text x="100.2228%" y="703.50"></text></g><g><title>chess::v2::Manager::work (1 samples, 0.03%)</title><rect x="99.9728%" y="677" width="0.0272%" height="15" fill="rgb(213,184,43)" fg:x="3680" fg:w="1"/><text x="100.2228%" y="687.50"></text></g></svg></svg>